
tugasUTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00802000  00003226  000032ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000322  0080202e  0080202e  000032e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  00003388  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012f53  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005830  00000000  00000000  000168ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009baa  00000000  00000000  0001c0db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c64  00000000  00000000  00025c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003519c  00000000  00000000  000278ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008df5  00000000  00000000  0005ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  00065880  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cc2b  00000000  00000000  00065f40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_11>
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_14>
      3c:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_15>
      40:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_16>
      44:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_17>
      48:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_18>
      4c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_19>
      50:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_20>
      54:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_21>
      58:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_22>
      5c:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_23>
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	64 c6       	rjmp	.+3272   	; 0xd66 <__vector_39>
      9e:	00 00       	nop
      a0:	94 c6       	rjmp	.+3368   	; 0xdca <__vector_40>
      a2:	00 00       	nop
      a4:	c4 c6       	rjmp	.+3464   	; 0xe2e <__vector_41>
      a6:	00 00       	nop
      a8:	f4 c6       	rjmp	.+3560   	; 0xe92 <__vector_42>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__vector_47>
      c0:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_48>
      c4:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_49>
      c8:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_50>
      cc:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_51>
      d0:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_52>
      d4:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_53>
      d8:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_54>
      dc:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__vector_55>
      e0:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__vector_56>
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	5c c5       	rjmp	.+2744   	; 0xbd6 <__vector_71>
     11e:	00 00       	nop
     120:	8c c5       	rjmp	.+2840   	; 0xc3a <__vector_72>
     122:	00 00       	nop
     124:	bc c5       	rjmp	.+2936   	; 0xc9e <__vector_73>
     126:	00 00       	nop
     128:	ec c5       	rjmp	.+3032   	; 0xd02 <__vector_74>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_77>
     138:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_78>
     13c:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_79>
     140:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_80>
     144:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_81>
     148:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_82>
     14c:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__vector_83>
     150:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_84>
     154:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__vector_85>
     158:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_86>
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__vector_108>
     1b4:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__vector_109>
     1b8:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__vector_110>
     1bc:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_111>
     1c0:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__vector_112>
     1c4:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__vector_113>
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1d50>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6538>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6510>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5538>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d10>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e6 e2       	ldi	r30, 0x26	; 38
     4a6:	f2 e3       	ldi	r31, 0x32	; 50
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ae 32       	cpi	r26, 0x2E	; 46
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	ae e2       	ldi	r26, 0x2E	; 46
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a0 35       	cpi	r26, 0x50	; 80
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <main>
     4cc:	0c 94 11 19 	jmp	0x3222	; 0x3222 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	0e 94 12 12 	call	0x2424	; 0x2424 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     538:	c1 2c       	mov	r12, r1
     53a:	d1 2c       	mov	r13, r1
     53c:	76 01       	movw	r14, r12
     53e:	00 e4       	ldi	r16, 0x40	; 64
     540:	12 e4       	ldi	r17, 0x42	; 66
     542:	2f e0       	ldi	r18, 0x0F	; 15
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	43 e0       	ldi	r20, 0x03	; 3
     548:	be 01       	movw	r22, r28
     54a:	6f 5f       	subi	r22, 0xFF	; 255
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	80 ea       	ldi	r24, 0xA0	; 160
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	0e 94 41 12 	call	0x2482	; 0x2482 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     556:	00 e6       	ldi	r16, 0x60	; 96
     558:	16 e0       	ldi	r17, 0x06	; 6
     55a:	ff 24       	eor	r15, r15
     55c:	f3 94       	inc	r15
     55e:	f8 01       	movw	r30, r16
     560:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     562:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     564:	be 01       	movw	r22, r28
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     572:	f8 01       	movw	r30, r16
     574:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f9 e0       	ldi	r31, 0x09	; 9
     57a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     57c:	85 ff       	sbrs	r24, 5
     57e:	fd cf       	rjmp	.-6      	; 0x57a <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     580:	80 ea       	ldi	r24, 0xA0	; 160
     582:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     58c:	86 ff       	sbrs	r24, 6
     58e:	fd cf       	rjmp	.-6      	; 0x58a <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     590:	e0 ea       	ldi	r30, 0xA0	; 160
     592:	f9 e0       	ldi	r31, 0x09	; 9
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     598:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     59a:	be 01       	movw	r22, r28
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	80 ea       	ldi	r24, 0xA0	; 160
     5a2:	99 e0       	ldi	r25, 0x09	; 9
     5a4:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a8:	8b e2       	ldi	r24, 0x2B	; 43
     5aa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5c0:	e0 ea       	ldi	r30, 0xA0	; 160
     5c2:	f9 e0       	ldi	r31, 0x09	; 9
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5ca:	86 ea       	ldi	r24, 0xA6	; 166
     5cc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5d6:	86 ff       	sbrs	r24, 6
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	80 e4       	ldi	r24, 0x40	; 64
     5e0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5e2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	99 e0       	ldi	r25, 0x09	; 9
     5ee:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f2:	8b e2       	ldi	r24, 0x2B	; 43
     5f4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5f6:	be 01       	movw	r22, r28
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	80 ea       	ldi	r24, 0xA0	; 160
     5fe:	99 e0       	ldi	r25, 0x09	; 9
     600:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     60a:	e0 ea       	ldi	r30, 0xA0	; 160
     60c:	f9 e0       	ldi	r31, 0x09	; 9
     60e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     610:	85 ff       	sbrs	r24, 5
     612:	fd cf       	rjmp	.-6      	; 0x60e <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     614:	88 ec       	ldi	r24, 0xC8	; 200
     616:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     61a:	e0 ea       	ldi	r30, 0xA0	; 160
     61c:	f9 e0       	ldi	r31, 0x09	; 9
     61e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     620:	86 ff       	sbrs	r24, 6
     622:	fd cf       	rjmp	.-6      	; 0x61e <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     624:	e0 ea       	ldi	r30, 0xA0	; 160
     626:	f9 e0       	ldi	r31, 0x09	; 9
     628:	80 e4       	ldi	r24, 0x40	; 64
     62a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     62c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     62e:	be 01       	movw	r22, r28
     630:	6f 5f       	subi	r22, 0xFF	; 255
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	80 ea       	ldi	r24, 0xA0	; 160
     636:	99 e0       	ldi	r25, 0x09	; 9
     638:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63c:	8b e2       	ldi	r24, 0x2B	; 43
     63e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     640:	be 01       	movw	r22, r28
     642:	6f 5f       	subi	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	80 ea       	ldi	r24, 0xA0	; 160
     648:	99 e0       	ldi	r25, 0x09	; 9
     64a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     654:	e0 ea       	ldi	r30, 0xA0	; 160
     656:	f9 e0       	ldi	r31, 0x09	; 9
     658:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65a:	85 ff       	sbrs	r24, 5
     65c:	fd cf       	rjmp	.-6      	; 0x658 <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     65e:	82 ea       	ldi	r24, 0xA2	; 162
     660:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     664:	e0 ea       	ldi	r30, 0xA0	; 160
     666:	f9 e0       	ldi	r31, 0x09	; 9
     668:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66a:	86 ff       	sbrs	r24, 6
     66c:	fd cf       	rjmp	.-6      	; 0x668 <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66e:	e0 ea       	ldi	r30, 0xA0	; 160
     670:	f9 e0       	ldi	r31, 0x09	; 9
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     676:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	80 ea       	ldi	r24, 0xA0	; 160
     680:	99 e0       	ldi	r25, 0x09	; 9
     682:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69e:	e0 ea       	ldi	r30, 0xA0	; 160
     6a0:	f9 e0       	ldi	r31, 0x09	; 9
     6a2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a4:	85 ff       	sbrs	r24, 5
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a8:	8f e2       	ldi	r24, 0x2F	; 47
     6aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6b4:	86 ff       	sbrs	r24, 6
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ba:	f9 e0       	ldi	r31, 0x09	; 9
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6c0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	80 ea       	ldi	r24, 0xA0	; 160
     6ca:	99 e0       	ldi	r25, 0x09	; 9
     6cc:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6d0:	8b e2       	ldi	r24, 0x2B	; 43
     6d2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	80 ea       	ldi	r24, 0xA0	; 160
     6dc:	99 e0       	ldi	r25, 0x09	; 9
     6de:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
     6ec:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6ee:	85 ff       	sbrs	r24, 5
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6f2:	88 ef       	ldi	r24, 0xF8	; 248
     6f4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f8:	e0 ea       	ldi	r30, 0xA0	; 160
     6fa:	f9 e0       	ldi	r31, 0x09	; 9
     6fc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6fe:	86 ff       	sbrs	r24, 6
     700:	fd cf       	rjmp	.-6      	; 0x6fc <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     702:	e0 ea       	ldi	r30, 0xA0	; 160
     704:	f9 e0       	ldi	r31, 0x09	; 9
     706:	80 e4       	ldi	r24, 0x40	; 64
     708:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     70a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	80 ea       	ldi	r24, 0xA0	; 160
     714:	99 e0       	ldi	r25, 0x09	; 9
     716:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     71a:	8b e2       	ldi	r24, 0x2B	; 43
     71c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     71e:	be 01       	movw	r22, r28
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	80 ea       	ldi	r24, 0xA0	; 160
     726:	99 e0       	ldi	r25, 0x09	; 9
     728:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     732:	e0 ea       	ldi	r30, 0xA0	; 160
     734:	f9 e0       	ldi	r31, 0x09	; 9
     736:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     738:	85 ff       	sbrs	r24, 5
     73a:	fd cf       	rjmp	.-6      	; 0x736 <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     73c:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
     744:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     746:	86 ff       	sbrs	r24, 6
     748:	fd cf       	rjmp	.-6      	; 0x744 <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     74a:	e0 ea       	ldi	r30, 0xA0	; 160
     74c:	f9 e0       	ldi	r31, 0x09	; 9
     74e:	80 e4       	ldi	r24, 0x40	; 64
     750:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     752:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     754:	be 01       	movw	r22, r28
     756:	6f 5f       	subi	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	80 ea       	ldi	r24, 0xA0	; 160
     75c:	99 e0       	ldi	r25, 0x09	; 9
     75e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     762:	8b e2       	ldi	r24, 0x2B	; 43
     764:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	99 e0       	ldi	r25, 0x09	; 9
     770:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     77a:	e0 ea       	ldi	r30, 0xA0	; 160
     77c:	f9 e0       	ldi	r31, 0x09	; 9
     77e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     780:	85 ff       	sbrs	r24, 5
     782:	fd cf       	rjmp	.-6      	; 0x77e <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     784:	81 e2       	ldi	r24, 0x21	; 33
     786:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     78a:	e0 ea       	ldi	r30, 0xA0	; 160
     78c:	f9 e0       	ldi	r31, 0x09	; 9
     78e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     790:	86 ff       	sbrs	r24, 6
     792:	fd cf       	rjmp	.-6      	; 0x78e <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     794:	e0 ea       	ldi	r30, 0xA0	; 160
     796:	f9 e0       	ldi	r31, 0x09	; 9
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     79c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     79e:	be 01       	movw	r22, r28
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	80 ea       	ldi	r24, 0xA0	; 160
     7a6:	99 e0       	ldi	r25, 0x09	; 9
     7a8:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7ac:	8b e2       	ldi	r24, 0x2B	; 43
     7ae:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7b0:	be 01       	movw	r22, r28
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	99 e0       	ldi	r25, 0x09	; 9
     7ba:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7c4:	e0 ea       	ldi	r30, 0xA0	; 160
     7c6:	f9 e0       	ldi	r31, 0x09	; 9
     7c8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7ca:	85 ff       	sbrs	r24, 5
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ce:	81 e8       	ldi	r24, 0x81	; 129
     7d0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7d4:	e0 ea       	ldi	r30, 0xA0	; 160
     7d6:	f9 e0       	ldi	r31, 0x09	; 9
     7d8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7da:	86 ff       	sbrs	r24, 6
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7de:	e0 ea       	ldi	r30, 0xA0	; 160
     7e0:	f9 e0       	ldi	r31, 0x09	; 9
     7e2:	80 e4       	ldi	r24, 0x40	; 64
     7e4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7e6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7e8:	be 01       	movw	r22, r28
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	80 ea       	ldi	r24, 0xA0	; 160
     7f0:	99 e0       	ldi	r25, 0x09	; 9
     7f2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7f6:	8b e2       	ldi	r24, 0x2B	; 43
     7f8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7fa:	be 01       	movw	r22, r28
     7fc:	6f 5f       	subi	r22, 0xFF	; 255
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	99 e0       	ldi	r25, 0x09	; 9
     804:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	f9 e0       	ldi	r31, 0x09	; 9
     812:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     814:	85 ff       	sbrs	r24, 5
     816:	fd cf       	rjmp	.-6      	; 0x812 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     818:	81 e2       	ldi	r24, 0x21	; 33
     81a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     81e:	e0 ea       	ldi	r30, 0xA0	; 160
     820:	f9 e0       	ldi	r31, 0x09	; 9
     822:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     824:	86 ff       	sbrs	r24, 6
     826:	fd cf       	rjmp	.-6      	; 0x822 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     828:	e0 ea       	ldi	r30, 0xA0	; 160
     82a:	f9 e0       	ldi	r31, 0x09	; 9
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     830:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     832:	be 01       	movw	r22, r28
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	80 ea       	ldi	r24, 0xA0	; 160
     83a:	99 e0       	ldi	r25, 0x09	; 9
     83c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     840:	8b e2       	ldi	r24, 0x2B	; 43
     842:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     844:	be 01       	movw	r22, r28
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	80 ea       	ldi	r24, 0xA0	; 160
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     858:	e0 ea       	ldi	r30, 0xA0	; 160
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     85e:	85 ff       	sbrs	r24, 5
     860:	fd cf       	rjmp	.-6      	; 0x85c <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     862:	8f ea       	ldi	r24, 0xAF	; 175
     864:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     868:	e0 ea       	ldi	r30, 0xA0	; 160
     86a:	f9 e0       	ldi	r31, 0x09	; 9
     86c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     86e:	86 ff       	sbrs	r24, 6
     870:	fd cf       	rjmp	.-6      	; 0x86c <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     872:	e0 ea       	ldi	r30, 0xA0	; 160
     874:	f9 e0       	ldi	r31, 0x09	; 9
     876:	80 e4       	ldi	r24, 0x40	; 64
     878:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     87a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     87c:	be 01       	movw	r22, r28
     87e:	6f 5f       	subi	r22, 0xFF	; 255
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	80 ea       	ldi	r24, 0xA0	; 160
     884:	99 e0       	ldi	r25, 0x09	; 9
     886:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	08 95       	ret

000008a0 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	1f 92       	push	r1
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	08 2f       	mov	r16, r24
     8b2:	f6 2e       	mov	r15, r22
     8b4:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8b6:	0e 94 8c 12 	call	0x2518	; 0x2518 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8ba:	0f 70       	andi	r16, 0x0F	; 15
     8bc:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8be:	8b e2       	ldi	r24, 0x2B	; 43
     8c0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	80 ea       	ldi	r24, 0xA0	; 160
     8ca:	99 e0       	ldi	r25, 0x09	; 9
     8cc:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8d6:	e0 ea       	ldi	r30, 0xA0	; 160
     8d8:	f9 e0       	ldi	r31, 0x09	; 9
     8da:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8dc:	95 ff       	sbrs	r25, 5
     8de:	fd cf       	rjmp	.-6      	; 0x8da <gfx_mono_st7565r_put_byte+0x3a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8e0:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
     8e6:	f9 e0       	ldi	r31, 0x09	; 9
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8ea:	86 ff       	sbrs	r24, 6
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <gfx_mono_st7565r_put_byte+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ee:	e0 ea       	ldi	r30, 0xA0	; 160
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	80 e4       	ldi	r24, 0x40	; 64
     8f4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8f6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8f8:	be 01       	movw	r22, r28
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	80 ea       	ldi	r24, 0xA0	; 160
     900:	99 e0       	ldi	r25, 0x09	; 9
     902:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     906:	0f 2d       	mov	r16, r15
     908:	0f 77       	andi	r16, 0x7F	; 127
     90a:	02 95       	swap	r16
     90c:	0f 70       	andi	r16, 0x0F	; 15
     90e:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     910:	8b e2       	ldi	r24, 0x2B	; 43
     912:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     914:	be 01       	movw	r22, r28
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	80 ea       	ldi	r24, 0xA0	; 160
     91c:	99 e0       	ldi	r25, 0x09	; 9
     91e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     928:	e0 ea       	ldi	r30, 0xA0	; 160
     92a:	f9 e0       	ldi	r31, 0x09	; 9
     92c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     92e:	85 ff       	sbrs	r24, 5
     930:	fd cf       	rjmp	.-6      	; 0x92c <gfx_mono_st7565r_put_byte+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     932:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     936:	e0 ea       	ldi	r30, 0xA0	; 160
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     93c:	86 ff       	sbrs	r24, 6
     93e:	fd cf       	rjmp	.-6      	; 0x93a <gfx_mono_st7565r_put_byte+0x9a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     940:	e0 ea       	ldi	r30, 0xA0	; 160
     942:	f9 e0       	ldi	r31, 0x09	; 9
     944:	80 e4       	ldi	r24, 0x40	; 64
     946:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     948:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	80 ea       	ldi	r24, 0xA0	; 160
     952:	99 e0       	ldi	r25, 0x09	; 9
     954:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     958:	0f 2d       	mov	r16, r15
     95a:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     95c:	8b e2       	ldi	r24, 0x2B	; 43
     95e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     960:	be 01       	movw	r22, r28
     962:	6f 5f       	subi	r22, 0xFF	; 255
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	80 ea       	ldi	r24, 0xA0	; 160
     968:	99 e0       	ldi	r25, 0x09	; 9
     96a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     974:	e0 ea       	ldi	r30, 0xA0	; 160
     976:	f9 e0       	ldi	r31, 0x09	; 9
     978:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     97a:	85 ff       	sbrs	r24, 5
     97c:	fd cf       	rjmp	.-6      	; 0x978 <gfx_mono_st7565r_put_byte+0xd8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     97e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     982:	e0 ea       	ldi	r30, 0xA0	; 160
     984:	f9 e0       	ldi	r31, 0x09	; 9
     986:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     988:	86 ff       	sbrs	r24, 6
     98a:	fd cf       	rjmp	.-6      	; 0x986 <gfx_mono_st7565r_put_byte+0xe6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     98c:	e0 ea       	ldi	r30, 0xA0	; 160
     98e:	f9 e0       	ldi	r31, 0x09	; 9
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     994:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	99 e0       	ldi	r25, 0x09	; 9
     9a0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9a4:	8b e2       	ldi	r24, 0x2B	; 43
     9a6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9a8:	be 01       	movw	r22, r28
     9aa:	6f 5f       	subi	r22, 0xFF	; 255
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	80 ea       	ldi	r24, 0xA0	; 160
     9b0:	99 e0       	ldi	r25, 0x09	; 9
     9b2:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9bc:	e0 ea       	ldi	r30, 0xA0	; 160
     9be:	f9 e0       	ldi	r31, 0x09	; 9
     9c0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9c2:	85 ff       	sbrs	r24, 5
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <gfx_mono_st7565r_put_byte+0x120>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9c6:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9ca:	e0 ea       	ldi	r30, 0xA0	; 160
     9cc:	f9 e0       	ldi	r31, 0x09	; 9
     9ce:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9d0:	86 ff       	sbrs	r24, 6
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <gfx_mono_st7565r_put_byte+0x12e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9d4:	e0 ea       	ldi	r30, 0xA0	; 160
     9d6:	f9 e0       	ldi	r31, 0x09	; 9
     9d8:	80 e4       	ldi	r24, 0x40	; 64
     9da:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9dc:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9f2:	0f 90       	pop	r0
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	08 95       	ret

00000a00 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	1f 92       	push	r1
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a0e:	8e e2       	ldi	r24, 0x2E	; 46
     a10:	90 e2       	ldi	r25, 0x20	; 32
     a12:	0e 94 87 12 	call	0x250e	; 0x250e <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a16:	68 dd       	rcall	.-1328   	; 0x4e8 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a18:	8b e2       	ldi	r24, 0x2B	; 43
     a1a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	80 ea       	ldi	r24, 0xA0	; 160
     a24:	99 e0       	ldi	r25, 0x09	; 9
     a26:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <usart_spi_select_device>
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a30:	e0 ea       	ldi	r30, 0xA0	; 160
     a32:	f9 e0       	ldi	r31, 0x09	; 9
     a34:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a36:	85 ff       	sbrs	r24, 5
     a38:	fd cf       	rjmp	.-6      	; 0xa34 <gfx_mono_st7565r_init+0x34>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a3a:	80 e4       	ldi	r24, 0x40	; 64
     a3c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a40:	e0 ea       	ldi	r30, 0xA0	; 160
     a42:	f9 e0       	ldi	r31, 0x09	; 9
     a44:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a46:	86 ff       	sbrs	r24, 6
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <gfx_mono_st7565r_init+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a4a:	e0 ea       	ldi	r30, 0xA0	; 160
     a4c:	f9 e0       	ldi	r31, 0x09	; 9
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a52:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a54:	be 01       	movw	r22, r28
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	80 ea       	ldi	r24, 0xA0	; 160
     a5c:	99 e0       	ldi	r25, 0x09	; 9
     a5e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	0a c0       	rjmp	.+20     	; 0xa7a <gfx_mono_st7565r_init+0x7a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	61 2f       	mov	r22, r17
     a6a:	80 2f       	mov	r24, r16
     a6c:	19 df       	rcall	.-462    	; 0x8a0 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a6e:	1f 5f       	subi	r17, 0xFF	; 255
     a70:	10 38       	cpi	r17, 0x80	; 128
     a72:	c9 f7       	brne	.-14     	; 0xa66 <gfx_mono_st7565r_init+0x66>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a74:	0f 5f       	subi	r16, 0xFF	; 255
     a76:	04 30       	cpi	r16, 0x04	; 4
     a78:	11 f0       	breq	.+4      	; 0xa7e <gfx_mono_st7565r_init+0x7e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	f4 cf       	rjmp	.-24     	; 0xa66 <gfx_mono_st7565r_init+0x66>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a7e:	0f 90       	pop	r0
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a94:	88 23       	and	r24, r24
     a96:	54 f1       	brlt	.+84     	; 0xaec <gfx_mono_st7565r_draw_pixel+0x62>
     a98:	60 32       	cpi	r22, 0x20	; 32
     a9a:	40 f5       	brcc	.+80     	; 0xaec <gfx_mono_st7565r_draw_pixel+0x62>
     a9c:	d4 2f       	mov	r29, r20
     a9e:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     aa0:	f6 2e       	mov	r15, r22
     aa2:	f6 94       	lsr	r15
     aa4:	f6 94       	lsr	r15
     aa6:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	f8 9e       	mul	r15, r24
     aae:	60 19       	sub	r22, r0
     ab0:	71 09       	sbc	r23, r1
     ab2:	11 24       	eor	r1, r1
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	8c 01       	movw	r16, r24
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <gfx_mono_st7565r_draw_pixel+0x36>
     abc:	00 0f       	add	r16, r16
     abe:	11 1f       	adc	r17, r17
     ac0:	6a 95       	dec	r22
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ac4:	6c 2f       	mov	r22, r28
     ac6:	8f 2d       	mov	r24, r15
     ac8:	0e 94 9a 12 	call	0x2534	; 0x2534 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     acc:	d1 30       	cpi	r29, 0x01	; 1
     ace:	21 f0       	breq	.+8      	; 0xad8 <gfx_mono_st7565r_draw_pixel+0x4e>
     ad0:	28 f0       	brcs	.+10     	; 0xadc <gfx_mono_st7565r_draw_pixel+0x52>
     ad2:	d2 30       	cpi	r29, 0x02	; 2
     ad4:	31 f0       	breq	.+12     	; 0xae2 <gfx_mono_st7565r_draw_pixel+0x58>
     ad6:	06 c0       	rjmp	.+12     	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x5a>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ad8:	80 2b       	or	r24, r16
		break;
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     adc:	00 95       	com	r16
     ade:	80 23       	and	r24, r16
		break;
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ae2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ae4:	48 2f       	mov	r20, r24
     ae6:	6c 2f       	mov	r22, r28
     ae8:	8f 2d       	mov	r24, r15
     aea:	da de       	rcall	.-588    	; 0x8a0 <gfx_mono_st7565r_put_byte>
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	08 95       	ret

00000af8 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     af8:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     afc:	08 95       	ret

00000afe <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     afe:	81 15       	cp	r24, r1
     b00:	22 e0       	ldi	r18, 0x02	; 2
     b02:	92 07       	cpc	r25, r18
     b04:	69 f4       	brne	.+26     	; 0xb20 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     b06:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <adca_enable_count>
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	98 0f       	add	r25, r24
     b0e:	90 93 2f 22 	sts	0x222F, r25	; 0x80222f <adca_enable_count>
     b12:	81 11       	cpse	r24, r1
     b14:	14 c0       	rjmp	.+40     	; 0xb3e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b16:	62 e0       	ldi	r22, 0x02	; 2
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <sysclk_enable_module>
     b1e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     b20:	80 34       	cpi	r24, 0x40	; 64
     b22:	92 40       	sbci	r25, 0x02	; 2
     b24:	61 f4       	brne	.+24     	; 0xb3e <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     b26:	80 91 2e 22 	lds	r24, 0x222E	; 0x80222e <adcb_enable_count>
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	98 0f       	add	r25, r24
     b2e:	90 93 2e 22 	sts	0x222E, r25	; 0x80222e <adcb_enable_count>
     b32:	81 11       	cpse	r24, r1
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <sysclk_enable_module>
     b3e:	08 95       	ret

00000b40 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     b40:	81 15       	cp	r24, r1
     b42:	22 e0       	ldi	r18, 0x02	; 2
     b44:	92 07       	cpc	r25, r18
     b46:	61 f4       	brne	.+24     	; 0xb60 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     b48:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <adca_enable_count>
     b4c:	81 50       	subi	r24, 0x01	; 1
     b4e:	80 93 2f 22 	sts	0x222F, r24	; 0x80222f <adca_enable_count>
     b52:	81 11       	cpse	r24, r1
     b54:	13 c0       	rjmp	.+38     	; 0xb7c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <sysclk_disable_module>
     b5e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     b60:	80 34       	cpi	r24, 0x40	; 64
     b62:	92 40       	sbci	r25, 0x02	; 2
     b64:	59 f4       	brne	.+22     	; 0xb7c <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     b66:	80 91 2e 22 	lds	r24, 0x222E	; 0x80222e <adcb_enable_count>
     b6a:	81 50       	subi	r24, 0x01	; 1
     b6c:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <adcb_enable_count>
     b70:	81 11       	cpse	r24, r1
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b74:	62 e0       	ldi	r22, 0x02	; 2
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <sysclk_disable_module>
     b7c:	08 95       	ret

00000b7e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	1f 92       	push	r1
     b8a:	1f 92       	push	r1
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b92:	8f b7       	in	r24, 0x3f	; 63
     b94:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b96:	f8 94       	cli
	return flags;
     b98:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     b9a:	c7 01       	movw	r24, r14
     b9c:	b0 df       	rcall	.-160    	; 0xafe <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     b9e:	f7 01       	movw	r30, r14
     ba0:	80 81       	ld	r24, Z
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ba6:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     ba8:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <sleepmgr_locks+0x1>
     bac:	8f 3f       	cpi	r24, 0xFF	; 255
     bae:	09 f4       	brne	.+2      	; 0xbb2 <adc_enable+0x34>
     bb0:	ff cf       	rjmp	.-2      	; 0xbb0 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bb2:	8f b7       	in	r24, 0x3f	; 63
     bb4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     bb6:	f8 94       	cli
	return flags;
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     bba:	ea e4       	ldi	r30, 0x4A	; 74
     bbc:	f3 e2       	ldi	r31, 0x23	; 35
     bbe:	81 81       	ldd	r24, Z+1	; 0x01
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bc4:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	08 95       	ret

00000bd6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	0b b6       	in	r0, 0x3b	; 59
     be2:	0f 92       	push	r0
     be4:	2f 93       	push	r18
     be6:	3f 93       	push	r19
     be8:	4f 93       	push	r20
     bea:	5f 93       	push	r21
     bec:	6f 93       	push	r22
     bee:	7f 93       	push	r23
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
     bf4:	af 93       	push	r26
     bf6:	bf 93       	push	r27
     bf8:	ef 93       	push	r30
     bfa:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     bfc:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     c00:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     c04:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <adca_callback>
     c08:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <adca_callback+0x1>
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	19 95       	eicall
}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0b be       	out	0x3b, r0	; 59
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	0b b6       	in	r0, 0x3b	; 59
     c46:	0f 92       	push	r0
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     c60:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     c64:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     c68:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <adca_callback>
     c6c:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <adca_callback+0x1>
     c70:	62 e0       	ldi	r22, 0x02	; 2
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	19 95       	eicall
}
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0b be       	out	0x3b, r0	; 59
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	0b b6       	in	r0, 0x3b	; 59
     caa:	0f 92       	push	r0
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     cc4:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     cc8:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     ccc:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <adca_callback>
     cd0:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <adca_callback+0x1>
     cd4:	64 e0       	ldi	r22, 0x04	; 4
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	19 95       	eicall
}
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     d28:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     d2c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     d30:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <adca_callback>
     d34:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <adca_callback+0x1>
     d38:	68 e0       	ldi	r22, 0x08	; 8
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	19 95       	eicall
}
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	7f 91       	pop	r23
     d4e:	6f 91       	pop	r22
     d50:	5f 91       	pop	r21
     d52:	4f 91       	pop	r20
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	0b be       	out	0x3b, r0	; 59
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	0b b6       	in	r0, 0x3b	; 59
     d72:	0f 92       	push	r0
     d74:	2f 93       	push	r18
     d76:	3f 93       	push	r19
     d78:	4f 93       	push	r20
     d7a:	5f 93       	push	r21
     d7c:	6f 93       	push	r22
     d7e:	7f 93       	push	r23
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
     d88:	ef 93       	push	r30
     d8a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     d8c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     d90:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     d94:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <adcb_callback>
     d98:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <adcb_callback+0x1>
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	80 e4       	ldi	r24, 0x40	; 64
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	19 95       	eicall
}
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	bf 91       	pop	r27
     daa:	af 91       	pop	r26
     dac:	9f 91       	pop	r25
     dae:	8f 91       	pop	r24
     db0:	7f 91       	pop	r23
     db2:	6f 91       	pop	r22
     db4:	5f 91       	pop	r21
     db6:	4f 91       	pop	r20
     db8:	3f 91       	pop	r19
     dba:	2f 91       	pop	r18
     dbc:	0f 90       	pop	r0
     dbe:	0b be       	out	0x3b, r0	; 59
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	0b b6       	in	r0, 0x3b	; 59
     dd6:	0f 92       	push	r0
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     df0:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     df4:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     df8:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <adcb_callback>
     dfc:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <adcb_callback+0x1>
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	80 e4       	ldi	r24, 0x40	; 64
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	19 95       	eicall
}
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	0f 90       	pop	r0
     e22:	0b be       	out	0x3b, r0	; 59
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	0b b6       	in	r0, 0x3b	; 59
     e3a:	0f 92       	push	r0
     e3c:	2f 93       	push	r18
     e3e:	3f 93       	push	r19
     e40:	4f 93       	push	r20
     e42:	5f 93       	push	r21
     e44:	6f 93       	push	r22
     e46:	7f 93       	push	r23
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
     e4c:	af 93       	push	r26
     e4e:	bf 93       	push	r27
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     e54:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     e58:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     e5c:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <adcb_callback>
     e60:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <adcb_callback+0x1>
     e64:	64 e0       	ldi	r22, 0x04	; 4
     e66:	80 e4       	ldi	r24, 0x40	; 64
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	19 95       	eicall
}
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	0f 90       	pop	r0
     e86:	0b be       	out	0x3b, r0	; 59
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	0b b6       	in	r0, 0x3b	; 59
     e9e:	0f 92       	push	r0
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     eb8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     ebc:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     ec0:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <adcb_callback>
     ec4:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <adcb_callback+0x1>
     ec8:	68 e0       	ldi	r22, 0x08	; 8
     eca:	80 e4       	ldi	r24, 0x40	; 64
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	19 95       	eicall
}
     ed0:	ff 91       	pop	r31
     ed2:	ef 91       	pop	r30
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	0b be       	out	0x3b, r0	; 59
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	1f 92       	push	r1
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	8c 01       	movw	r16, r24
     f10:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     f12:	81 15       	cp	r24, r1
     f14:	22 e0       	ldi	r18, 0x02	; 2
     f16:	92 07       	cpc	r25, r18
     f18:	81 f4       	brne	.+32     	; 0xf3a <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     f1a:	61 e2       	ldi	r22, 0x21	; 33
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	0e 94 65 13 	call	0x26ca	; 0x26ca <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     f24:	c8 2e       	mov	r12, r24
     f26:	d1 2c       	mov	r13, r1
     f28:	60 e2       	ldi	r22, 0x20	; 32
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0e 94 65 13 	call	0x26ca	; 0x26ca <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     f32:	dc 2c       	mov	r13, r12
     f34:	cc 24       	eor	r12, r12
     f36:	c8 2a       	or	r12, r24
     f38:	12 c0       	rjmp	.+36     	; 0xf5e <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     f3a:	80 34       	cpi	r24, 0x40	; 64
     f3c:	92 40       	sbci	r25, 0x02	; 2
     f3e:	d1 f5       	brne	.+116    	; 0xfb4 <adc_write_configuration+0xbe>
     f40:	65 e2       	ldi	r22, 0x25	; 37
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	0e 94 65 13 	call	0x26ca	; 0x26ca <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     f4a:	c8 2e       	mov	r12, r24
     f4c:	d1 2c       	mov	r13, r1
     f4e:	64 e2       	ldi	r22, 0x24	; 36
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	0e 94 65 13 	call	0x26ca	; 0x26ca <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     f58:	dc 2c       	mov	r13, r12
     f5a:	cc 24       	eor	r12, r12
     f5c:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f5e:	8f b7       	in	r24, 0x3f	; 63
     f60:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f62:	f8 94       	cli
	return flags;
     f64:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     f66:	c8 01       	movw	r24, r16
     f68:	ca dd       	rcall	.-1132   	; 0xafe <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     f6a:	f8 01       	movw	r30, r16
     f6c:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	90 83       	st	Z, r25
	adc->CAL = cal;
     f72:	c4 86       	std	Z+12, r12	; 0x0c
     f74:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     f76:	f7 01       	movw	r30, r14
     f78:	25 81       	ldd	r18, Z+5	; 0x05
     f7a:	36 81       	ldd	r19, Z+6	; 0x06
     f7c:	f8 01       	movw	r30, r16
     f7e:	20 8f       	std	Z+24, r18	; 0x18
     f80:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     f82:	f7 01       	movw	r30, r14
     f84:	92 81       	ldd	r25, Z+2	; 0x02
     f86:	f8 01       	movw	r30, r16
     f88:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     f8a:	f7 01       	movw	r30, r14
     f8c:	94 81       	ldd	r25, Z+4	; 0x04
     f8e:	f8 01       	movw	r30, r16
     f90:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     f92:	f7 01       	movw	r30, r14
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	f8 01       	movw	r30, r16
     f98:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     f9a:	f7 01       	movw	r30, r14
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	f8 01       	movw	r30, r16
     fa0:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	f7 01       	movw	r30, r14
     fa6:	90 81       	ld	r25, Z
     fa8:	89 2b       	or	r24, r25
     faa:	f8 01       	movw	r30, r16
     fac:	80 83       	st	Z, r24

	adc_disable_clock(adc);
     fae:	c8 01       	movw	r24, r16
     fb0:	c7 dd       	rcall	.-1138   	; 0xb40 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fb2:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	08 95       	ret

00000fca <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	1f 92       	push	r1
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	8c 01       	movw	r16, r24
     fe0:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fe2:	8f b7       	in	r24, 0x3f	; 63
     fe4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fe6:	f8 94       	cli
	return flags;
     fe8:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     fea:	c8 01       	movw	r24, r16
     fec:	88 dd       	rcall	.-1264   	; 0xafe <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     fee:	f8 01       	movw	r30, r16
     ff0:	80 81       	ld	r24, Z
     ff2:	80 7c       	andi	r24, 0xC0	; 192
     ff4:	f7 01       	movw	r30, r14
     ff6:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 8d       	ldd	r24, Z+24	; 0x18
     ffc:	91 8d       	ldd	r25, Z+25	; 0x19
     ffe:	f7 01       	movw	r30, r14
    1000:	85 83       	std	Z+5, r24	; 0x05
    1002:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    1004:	f8 01       	movw	r30, r16
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	f7 01       	movw	r30, r14
    100a:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    100c:	f8 01       	movw	r30, r16
    100e:	84 81       	ldd	r24, Z+4	; 0x04
    1010:	f7 01       	movw	r30, r14
    1012:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1014:	f8 01       	movw	r30, r16
    1016:	83 81       	ldd	r24, Z+3	; 0x03
    1018:	f7 01       	movw	r30, r14
    101a:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    101c:	f8 01       	movw	r30, r16
    101e:	81 81       	ldd	r24, Z+1	; 0x01
    1020:	f7 01       	movw	r30, r14
    1022:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1024:	c8 01       	movw	r24, r16
    1026:	8c dd       	rcall	.-1256   	; 0xb40 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1028:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	08 95       	ret

0000103c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	1f 92       	push	r1
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	6c 01       	movw	r12, r24
    1058:	b6 2e       	mov	r11, r22
    105a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    105c:	86 2f       	mov	r24, r22
    105e:	83 70       	andi	r24, 0x03	; 3
    1060:	29 f4       	brne	.+10     	; 0x106c <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1062:	96 2f       	mov	r25, r22
    1064:	96 95       	lsr	r25
    1066:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    106c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    106e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1070:	90 ff       	sbrs	r25, 0
		index++;
    1072:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1074:	86 01       	movw	r16, r12
    1076:	00 5e       	subi	r16, 0xE0	; 224
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	98 e0       	ldi	r25, 0x08	; 8
    107c:	89 9f       	mul	r24, r25
    107e:	00 0d       	add	r16, r0
    1080:	11 1d       	adc	r17, r1
    1082:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1084:	8f b7       	in	r24, 0x3f	; 63
    1086:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1088:	f8 94       	cli
	return flags;
    108a:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    108c:	c6 01       	movw	r24, r12
    108e:	37 dd       	rcall	.-1426   	; 0xafe <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1090:	f7 01       	movw	r30, r14
    1092:	80 81       	ld	r24, Z
    1094:	f8 01       	movw	r30, r16
    1096:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1098:	f7 01       	movw	r30, r14
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	f8 01       	movw	r30, r16
    109e:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    10a0:	f7 01       	movw	r30, r14
    10a2:	81 81       	ldd	r24, Z+1	; 0x01
    10a4:	f8 01       	movw	r30, r16
    10a6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    10a8:	b0 fe       	sbrs	r11, 0
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    10ac:	f7 01       	movw	r30, r14
    10ae:	83 81       	ldd	r24, Z+3	; 0x03
    10b0:	f8 01       	movw	r30, r16
    10b2:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    10b4:	c6 01       	movw	r24, r12
    10b6:	44 dd       	rcall	.-1400   	; 0xb40 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b8:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    10ba:	0f 90       	pop	r0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	08 95       	ret

000010d2 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	6c 01       	movw	r12, r24
    10ee:	b6 2e       	mov	r11, r22
    10f0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    10f2:	86 2f       	mov	r24, r22
    10f4:	83 70       	andi	r24, 0x03	; 3
    10f6:	29 f4       	brne	.+10     	; 0x1102 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    10f8:	96 2f       	mov	r25, r22
    10fa:	96 95       	lsr	r25
    10fc:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1102:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1104:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1106:	90 ff       	sbrs	r25, 0
		index++;
    1108:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    110a:	86 01       	movw	r16, r12
    110c:	00 5e       	subi	r16, 0xE0	; 224
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	98 e0       	ldi	r25, 0x08	; 8
    1112:	89 9f       	mul	r24, r25
    1114:	00 0d       	add	r16, r0
    1116:	11 1d       	adc	r17, r1
    1118:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    111a:	8f b7       	in	r24, 0x3f	; 63
    111c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    111e:	f8 94       	cli
	return flags;
    1120:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1122:	c6 01       	movw	r24, r12
    1124:	ec dc       	rcall	.-1576   	; 0xafe <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1126:	f8 01       	movw	r30, r16
    1128:	80 81       	ld	r24, Z
    112a:	f7 01       	movw	r30, r14
    112c:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    112e:	f8 01       	movw	r30, r16
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	f7 01       	movw	r30, r14
    1134:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1136:	f8 01       	movw	r30, r16
    1138:	81 81       	ldd	r24, Z+1	; 0x01
    113a:	f7 01       	movw	r30, r14
    113c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    113e:	b0 fe       	sbrs	r11, 0
    1140:	04 c0       	rjmp	.+8      	; 0x114a <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1142:	f8 01       	movw	r30, r16
    1144:	86 81       	ldd	r24, Z+6	; 0x06
    1146:	f7 01       	movw	r30, r14
    1148:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    114a:	c6 01       	movw	r24, r12
    114c:	f9 dc       	rcall	.-1550   	; 0xb40 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    114e:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1150:	0f 90       	pop	r0
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	08 95       	ret

00001168 <rtc_get_time>:
	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
}
    1168:	80 e1       	ldi	r24, 0x10	; 16
    116a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    116e:	e0 e2       	ldi	r30, 0x20	; 32
    1170:	f4 e0       	ldi	r31, 0x04	; 4
    1172:	81 81       	ldd	r24, Z+1	; 0x01
    1174:	84 fd       	sbrc	r24, 4
    1176:	fd cf       	rjmp	.-6      	; 0x1172 <rtc_get_time+0xa>
    1178:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    117c:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    1180:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    1184:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    1188:	08 95       	ret

0000118a <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	0b b6       	in	r0, 0x3b	; 59
    1196:	0f 92       	push	r0
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	4f 93       	push	r20
    119e:	5f 93       	push	r21
    11a0:	6f 93       	push	r22
    11a2:	7f 93       	push	r23
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    11b4:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    11b8:	c0 91 48 23 	lds	r28, 0x2348	; 0x802348 <rtc_data>
    11bc:	d0 91 49 23 	lds	r29, 0x2349	; 0x802349 <rtc_data+0x1>
    11c0:	20 97       	sbiw	r28, 0x00	; 0
    11c2:	19 f0       	breq	.+6      	; 0x11ca <__vector_11+0x40>
		rtc_data.callback(rtc_get_time());
    11c4:	d1 df       	rcall	.-94     	; 0x1168 <rtc_get_time>
    11c6:	fe 01       	movw	r30, r28
    11c8:	19 95       	eicall
}
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0b be       	out	0x3b, r0	; 59
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	0b b6       	in	r0, 0x3b	; 59
    1200:	0f 92       	push	r0
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	e0 91 76 22 	lds	r30, 0x2276	; 0x802276 <tc_tcc0_ovf_callback>
    121e:	f0 91 77 22 	lds	r31, 0x2277	; 0x802277 <tc_tcc0_ovf_callback+0x1>
    1222:	30 97       	sbiw	r30, 0x00	; 0
    1224:	09 f0       	breq	.+2      	; 0x1228 <__vector_14+0x34>
    1226:	19 95       	eicall
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0b be       	out	0x3b, r0	; 59
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_15>:
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	0b b6       	in	r0, 0x3b	; 59
    125a:	0f 92       	push	r0
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
    1274:	e0 91 74 22 	lds	r30, 0x2274	; 0x802274 <tc_tcc0_err_callback>
    1278:	f0 91 75 22 	lds	r31, 0x2275	; 0x802275 <tc_tcc0_err_callback+0x1>
    127c:	30 97       	sbiw	r30, 0x00	; 0
    127e:	09 f0       	breq	.+2      	; 0x1282 <__vector_15+0x34>
    1280:	19 95       	eicall
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0b be       	out	0x3b, r0	; 59
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_16>:
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0b b6       	in	r0, 0x3b	; 59
    12b4:	0f 92       	push	r0
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	e0 91 72 22 	lds	r30, 0x2272	; 0x802272 <tc_tcc0_cca_callback>
    12d2:	f0 91 73 22 	lds	r31, 0x2273	; 0x802273 <tc_tcc0_cca_callback+0x1>
    12d6:	30 97       	sbiw	r30, 0x00	; 0
    12d8:	09 f0       	breq	.+2      	; 0x12dc <__vector_16+0x34>
    12da:	19 95       	eicall
    12dc:	ff 91       	pop	r31
    12de:	ef 91       	pop	r30
    12e0:	bf 91       	pop	r27
    12e2:	af 91       	pop	r26
    12e4:	9f 91       	pop	r25
    12e6:	8f 91       	pop	r24
    12e8:	7f 91       	pop	r23
    12ea:	6f 91       	pop	r22
    12ec:	5f 91       	pop	r21
    12ee:	4f 91       	pop	r20
    12f0:	3f 91       	pop	r19
    12f2:	2f 91       	pop	r18
    12f4:	0f 90       	pop	r0
    12f6:	0b be       	out	0x3b, r0	; 59
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_17>:
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	0b b6       	in	r0, 0x3b	; 59
    130e:	0f 92       	push	r0
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
    1328:	e0 91 70 22 	lds	r30, 0x2270	; 0x802270 <tc_tcc0_ccb_callback>
    132c:	f0 91 71 22 	lds	r31, 0x2271	; 0x802271 <tc_tcc0_ccb_callback+0x1>
    1330:	30 97       	sbiw	r30, 0x00	; 0
    1332:	09 f0       	breq	.+2      	; 0x1336 <__vector_17+0x34>
    1334:	19 95       	eicall
    1336:	ff 91       	pop	r31
    1338:	ef 91       	pop	r30
    133a:	bf 91       	pop	r27
    133c:	af 91       	pop	r26
    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	7f 91       	pop	r23
    1344:	6f 91       	pop	r22
    1346:	5f 91       	pop	r21
    1348:	4f 91       	pop	r20
    134a:	3f 91       	pop	r19
    134c:	2f 91       	pop	r18
    134e:	0f 90       	pop	r0
    1350:	0b be       	out	0x3b, r0	; 59
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <__vector_18>:
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	0b b6       	in	r0, 0x3b	; 59
    1368:	0f 92       	push	r0
    136a:	2f 93       	push	r18
    136c:	3f 93       	push	r19
    136e:	4f 93       	push	r20
    1370:	5f 93       	push	r21
    1372:	6f 93       	push	r22
    1374:	7f 93       	push	r23
    1376:	8f 93       	push	r24
    1378:	9f 93       	push	r25
    137a:	af 93       	push	r26
    137c:	bf 93       	push	r27
    137e:	ef 93       	push	r30
    1380:	ff 93       	push	r31
    1382:	e0 91 6e 22 	lds	r30, 0x226E	; 0x80226e <tc_tcc0_ccc_callback>
    1386:	f0 91 6f 22 	lds	r31, 0x226F	; 0x80226f <tc_tcc0_ccc_callback+0x1>
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	09 f0       	breq	.+2      	; 0x1390 <__vector_18+0x34>
    138e:	19 95       	eicall
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <__vector_19>:
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	11 24       	eor	r1, r1
    13c0:	0b b6       	in	r0, 0x3b	; 59
    13c2:	0f 92       	push	r0
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	e0 91 6c 22 	lds	r30, 0x226C	; 0x80226c <tc_tcc0_ccd_callback>
    13e0:	f0 91 6d 22 	lds	r31, 0x226D	; 0x80226d <tc_tcc0_ccd_callback+0x1>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	09 f0       	breq	.+2      	; 0x13ea <__vector_19+0x34>
    13e8:	19 95       	eicall
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	0f 90       	pop	r0
    1404:	0b be       	out	0x3b, r0	; 59
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_20>:
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	0b b6       	in	r0, 0x3b	; 59
    141c:	0f 92       	push	r0
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
    1436:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <tc_tcc1_ovf_callback>
    143a:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <tc_tcc1_ovf_callback+0x1>
    143e:	30 97       	sbiw	r30, 0x00	; 0
    1440:	09 f0       	breq	.+2      	; 0x1444 <__vector_20+0x34>
    1442:	19 95       	eicall
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0b be       	out	0x3b, r0	; 59
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_21>:
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <tc_tcc1_err_callback>
    1494:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <tc_tcc1_err_callback+0x1>
    1498:	30 97       	sbiw	r30, 0x00	; 0
    149a:	09 f0       	breq	.+2      	; 0x149e <__vector_21+0x34>
    149c:	19 95       	eicall
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0b be       	out	0x3b, r0	; 59
    14ba:	0f 90       	pop	r0
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	0f 90       	pop	r0
    14c0:	1f 90       	pop	r1
    14c2:	18 95       	reti

000014c4 <__vector_22>:
    14c4:	1f 92       	push	r1
    14c6:	0f 92       	push	r0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	0f 92       	push	r0
    14cc:	11 24       	eor	r1, r1
    14ce:	0b b6       	in	r0, 0x3b	; 59
    14d0:	0f 92       	push	r0
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
    14ea:	e0 91 66 22 	lds	r30, 0x2266	; 0x802266 <tc_tcc1_cca_callback>
    14ee:	f0 91 67 22 	lds	r31, 0x2267	; 0x802267 <tc_tcc1_cca_callback+0x1>
    14f2:	30 97       	sbiw	r30, 0x00	; 0
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <__vector_22+0x34>
    14f6:	19 95       	eicall
    14f8:	ff 91       	pop	r31
    14fa:	ef 91       	pop	r30
    14fc:	bf 91       	pop	r27
    14fe:	af 91       	pop	r26
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	7f 91       	pop	r23
    1506:	6f 91       	pop	r22
    1508:	5f 91       	pop	r21
    150a:	4f 91       	pop	r20
    150c:	3f 91       	pop	r19
    150e:	2f 91       	pop	r18
    1510:	0f 90       	pop	r0
    1512:	0b be       	out	0x3b, r0	; 59
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_23>:
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	0b b6       	in	r0, 0x3b	; 59
    152a:	0f 92       	push	r0
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
    1544:	e0 91 64 22 	lds	r30, 0x2264	; 0x802264 <tc_tcc1_ccb_callback>
    1548:	f0 91 65 22 	lds	r31, 0x2265	; 0x802265 <tc_tcc1_ccb_callback+0x1>
    154c:	30 97       	sbiw	r30, 0x00	; 0
    154e:	09 f0       	breq	.+2      	; 0x1552 <__vector_23+0x34>
    1550:	19 95       	eicall
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	0f 90       	pop	r0
    156c:	0b be       	out	0x3b, r0	; 59
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__vector_77>:
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	0b b6       	in	r0, 0x3b	; 59
    1584:	0f 92       	push	r0
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
    159e:	e0 91 62 22 	lds	r30, 0x2262	; 0x802262 <tc_tcd0_ovf_callback>
    15a2:	f0 91 63 22 	lds	r31, 0x2263	; 0x802263 <tc_tcd0_ovf_callback+0x1>
    15a6:	30 97       	sbiw	r30, 0x00	; 0
    15a8:	09 f0       	breq	.+2      	; 0x15ac <__vector_77+0x34>
    15aa:	19 95       	eicall
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0b be       	out	0x3b, r0	; 59
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <__vector_78>:
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	0b b6       	in	r0, 0x3b	; 59
    15de:	0f 92       	push	r0
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <tc_tcd0_err_callback>
    15fc:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <tc_tcd0_err_callback+0x1>
    1600:	30 97       	sbiw	r30, 0x00	; 0
    1602:	09 f0       	breq	.+2      	; 0x1606 <__vector_78+0x34>
    1604:	19 95       	eicall
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	bf 91       	pop	r27
    160c:	af 91       	pop	r26
    160e:	9f 91       	pop	r25
    1610:	8f 91       	pop	r24
    1612:	7f 91       	pop	r23
    1614:	6f 91       	pop	r22
    1616:	5f 91       	pop	r21
    1618:	4f 91       	pop	r20
    161a:	3f 91       	pop	r19
    161c:	2f 91       	pop	r18
    161e:	0f 90       	pop	r0
    1620:	0b be       	out	0x3b, r0	; 59
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_79>:
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	0b b6       	in	r0, 0x3b	; 59
    1638:	0f 92       	push	r0
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
    1652:	e0 91 5e 22 	lds	r30, 0x225E	; 0x80225e <tc_tcd0_cca_callback>
    1656:	f0 91 5f 22 	lds	r31, 0x225F	; 0x80225f <tc_tcd0_cca_callback+0x1>
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <__vector_79+0x34>
    165e:	19 95       	eicall
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_80>:
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	0b b6       	in	r0, 0x3b	; 59
    1692:	0f 92       	push	r0
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	e0 91 5c 22 	lds	r30, 0x225C	; 0x80225c <tc_tcd0_ccb_callback>
    16b0:	f0 91 5d 22 	lds	r31, 0x225D	; 0x80225d <tc_tcd0_ccb_callback+0x1>
    16b4:	30 97       	sbiw	r30, 0x00	; 0
    16b6:	09 f0       	breq	.+2      	; 0x16ba <__vector_80+0x34>
    16b8:	19 95       	eicall
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0b be       	out	0x3b, r0	; 59
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_81>:
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	0b b6       	in	r0, 0x3b	; 59
    16ec:	0f 92       	push	r0
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
    1706:	e0 91 5a 22 	lds	r30, 0x225A	; 0x80225a <tc_tcd0_ccc_callback>
    170a:	f0 91 5b 22 	lds	r31, 0x225B	; 0x80225b <tc_tcd0_ccc_callback+0x1>
    170e:	30 97       	sbiw	r30, 0x00	; 0
    1710:	09 f0       	breq	.+2      	; 0x1714 <__vector_81+0x34>
    1712:	19 95       	eicall
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0b be       	out	0x3b, r0	; 59
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <__vector_82>:
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	0b b6       	in	r0, 0x3b	; 59
    1746:	0f 92       	push	r0
    1748:	2f 93       	push	r18
    174a:	3f 93       	push	r19
    174c:	4f 93       	push	r20
    174e:	5f 93       	push	r21
    1750:	6f 93       	push	r22
    1752:	7f 93       	push	r23
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
    1758:	af 93       	push	r26
    175a:	bf 93       	push	r27
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
    1760:	e0 91 58 22 	lds	r30, 0x2258	; 0x802258 <tc_tcd0_ccd_callback>
    1764:	f0 91 59 22 	lds	r31, 0x2259	; 0x802259 <tc_tcd0_ccd_callback+0x1>
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	09 f0       	breq	.+2      	; 0x176e <__vector_82+0x34>
    176c:	19 95       	eicall
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0b be       	out	0x3b, r0	; 59
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <__vector_83>:
    1794:	1f 92       	push	r1
    1796:	0f 92       	push	r0
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	0f 92       	push	r0
    179c:	11 24       	eor	r1, r1
    179e:	0b b6       	in	r0, 0x3b	; 59
    17a0:	0f 92       	push	r0
    17a2:	2f 93       	push	r18
    17a4:	3f 93       	push	r19
    17a6:	4f 93       	push	r20
    17a8:	5f 93       	push	r21
    17aa:	6f 93       	push	r22
    17ac:	7f 93       	push	r23
    17ae:	8f 93       	push	r24
    17b0:	9f 93       	push	r25
    17b2:	af 93       	push	r26
    17b4:	bf 93       	push	r27
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
    17ba:	e0 91 56 22 	lds	r30, 0x2256	; 0x802256 <tc_tcd1_ovf_callback>
    17be:	f0 91 57 22 	lds	r31, 0x2257	; 0x802257 <tc_tcd1_ovf_callback+0x1>
    17c2:	30 97       	sbiw	r30, 0x00	; 0
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <__vector_83+0x34>
    17c6:	19 95       	eicall
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	0f 90       	pop	r0
    17e2:	0b be       	out	0x3b, r0	; 59
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <__vector_84>:
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	0b b6       	in	r0, 0x3b	; 59
    17fa:	0f 92       	push	r0
    17fc:	2f 93       	push	r18
    17fe:	3f 93       	push	r19
    1800:	4f 93       	push	r20
    1802:	5f 93       	push	r21
    1804:	6f 93       	push	r22
    1806:	7f 93       	push	r23
    1808:	8f 93       	push	r24
    180a:	9f 93       	push	r25
    180c:	af 93       	push	r26
    180e:	bf 93       	push	r27
    1810:	ef 93       	push	r30
    1812:	ff 93       	push	r31
    1814:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <tc_tcd1_err_callback>
    1818:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <tc_tcd1_err_callback+0x1>
    181c:	30 97       	sbiw	r30, 0x00	; 0
    181e:	09 f0       	breq	.+2      	; 0x1822 <__vector_84+0x34>
    1820:	19 95       	eicall
    1822:	ff 91       	pop	r31
    1824:	ef 91       	pop	r30
    1826:	bf 91       	pop	r27
    1828:	af 91       	pop	r26
    182a:	9f 91       	pop	r25
    182c:	8f 91       	pop	r24
    182e:	7f 91       	pop	r23
    1830:	6f 91       	pop	r22
    1832:	5f 91       	pop	r21
    1834:	4f 91       	pop	r20
    1836:	3f 91       	pop	r19
    1838:	2f 91       	pop	r18
    183a:	0f 90       	pop	r0
    183c:	0b be       	out	0x3b, r0	; 59
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <__vector_85>:
    1848:	1f 92       	push	r1
    184a:	0f 92       	push	r0
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	0f 92       	push	r0
    1850:	11 24       	eor	r1, r1
    1852:	0b b6       	in	r0, 0x3b	; 59
    1854:	0f 92       	push	r0
    1856:	2f 93       	push	r18
    1858:	3f 93       	push	r19
    185a:	4f 93       	push	r20
    185c:	5f 93       	push	r21
    185e:	6f 93       	push	r22
    1860:	7f 93       	push	r23
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
    186e:	e0 91 52 22 	lds	r30, 0x2252	; 0x802252 <tc_tcd1_cca_callback>
    1872:	f0 91 53 22 	lds	r31, 0x2253	; 0x802253 <tc_tcd1_cca_callback+0x1>
    1876:	30 97       	sbiw	r30, 0x00	; 0
    1878:	09 f0       	breq	.+2      	; 0x187c <__vector_85+0x34>
    187a:	19 95       	eicall
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	bf 91       	pop	r27
    1882:	af 91       	pop	r26
    1884:	9f 91       	pop	r25
    1886:	8f 91       	pop	r24
    1888:	7f 91       	pop	r23
    188a:	6f 91       	pop	r22
    188c:	5f 91       	pop	r21
    188e:	4f 91       	pop	r20
    1890:	3f 91       	pop	r19
    1892:	2f 91       	pop	r18
    1894:	0f 90       	pop	r0
    1896:	0b be       	out	0x3b, r0	; 59
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_86>:
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	0b b6       	in	r0, 0x3b	; 59
    18ae:	0f 92       	push	r0
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	e0 91 50 22 	lds	r30, 0x2250	; 0x802250 <tc_tcd1_ccb_callback>
    18cc:	f0 91 51 22 	lds	r31, 0x2251	; 0x802251 <tc_tcd1_ccb_callback+0x1>
    18d0:	30 97       	sbiw	r30, 0x00	; 0
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <__vector_86+0x34>
    18d4:	19 95       	eicall
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	bf 91       	pop	r27
    18dc:	af 91       	pop	r26
    18de:	9f 91       	pop	r25
    18e0:	8f 91       	pop	r24
    18e2:	7f 91       	pop	r23
    18e4:	6f 91       	pop	r22
    18e6:	5f 91       	pop	r21
    18e8:	4f 91       	pop	r20
    18ea:	3f 91       	pop	r19
    18ec:	2f 91       	pop	r18
    18ee:	0f 90       	pop	r0
    18f0:	0b be       	out	0x3b, r0	; 59
    18f2:	0f 90       	pop	r0
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	0f 90       	pop	r0
    18f8:	1f 90       	pop	r1
    18fa:	18 95       	reti

000018fc <__vector_47>:
    18fc:	1f 92       	push	r1
    18fe:	0f 92       	push	r0
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	0f 92       	push	r0
    1904:	11 24       	eor	r1, r1
    1906:	0b b6       	in	r0, 0x3b	; 59
    1908:	0f 92       	push	r0
    190a:	2f 93       	push	r18
    190c:	3f 93       	push	r19
    190e:	4f 93       	push	r20
    1910:	5f 93       	push	r21
    1912:	6f 93       	push	r22
    1914:	7f 93       	push	r23
    1916:	8f 93       	push	r24
    1918:	9f 93       	push	r25
    191a:	af 93       	push	r26
    191c:	bf 93       	push	r27
    191e:	ef 93       	push	r30
    1920:	ff 93       	push	r31
    1922:	e0 91 4e 22 	lds	r30, 0x224E	; 0x80224e <tc_tce0_ovf_callback>
    1926:	f0 91 4f 22 	lds	r31, 0x224F	; 0x80224f <tc_tce0_ovf_callback+0x1>
    192a:	30 97       	sbiw	r30, 0x00	; 0
    192c:	09 f0       	breq	.+2      	; 0x1930 <__vector_47+0x34>
    192e:	19 95       	eicall
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0b be       	out	0x3b, r0	; 59
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <__vector_48>:
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	0b b6       	in	r0, 0x3b	; 59
    1962:	0f 92       	push	r0
    1964:	2f 93       	push	r18
    1966:	3f 93       	push	r19
    1968:	4f 93       	push	r20
    196a:	5f 93       	push	r21
    196c:	6f 93       	push	r22
    196e:	7f 93       	push	r23
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	af 93       	push	r26
    1976:	bf 93       	push	r27
    1978:	ef 93       	push	r30
    197a:	ff 93       	push	r31
    197c:	e0 91 4c 22 	lds	r30, 0x224C	; 0x80224c <tc_tce0_err_callback>
    1980:	f0 91 4d 22 	lds	r31, 0x224D	; 0x80224d <tc_tce0_err_callback+0x1>
    1984:	30 97       	sbiw	r30, 0x00	; 0
    1986:	09 f0       	breq	.+2      	; 0x198a <__vector_48+0x34>
    1988:	19 95       	eicall
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0b be       	out	0x3b, r0	; 59
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_49>:
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	0b b6       	in	r0, 0x3b	; 59
    19bc:	0f 92       	push	r0
    19be:	2f 93       	push	r18
    19c0:	3f 93       	push	r19
    19c2:	4f 93       	push	r20
    19c4:	5f 93       	push	r21
    19c6:	6f 93       	push	r22
    19c8:	7f 93       	push	r23
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	af 93       	push	r26
    19d0:	bf 93       	push	r27
    19d2:	ef 93       	push	r30
    19d4:	ff 93       	push	r31
    19d6:	e0 91 4a 22 	lds	r30, 0x224A	; 0x80224a <tc_tce0_cca_callback>
    19da:	f0 91 4b 22 	lds	r31, 0x224B	; 0x80224b <tc_tce0_cca_callback+0x1>
    19de:	30 97       	sbiw	r30, 0x00	; 0
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <__vector_49+0x34>
    19e2:	19 95       	eicall
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	0f 90       	pop	r0
    19fe:	0b be       	out	0x3b, r0	; 59
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__vector_50>:
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	0b b6       	in	r0, 0x3b	; 59
    1a16:	0f 92       	push	r0
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	e0 91 48 22 	lds	r30, 0x2248	; 0x802248 <tc_tce0_ccb_callback>
    1a34:	f0 91 49 22 	lds	r31, 0x2249	; 0x802249 <tc_tce0_ccb_callback+0x1>
    1a38:	30 97       	sbiw	r30, 0x00	; 0
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <__vector_50+0x34>
    1a3c:	19 95       	eicall
    1a3e:	ff 91       	pop	r31
    1a40:	ef 91       	pop	r30
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	7f 91       	pop	r23
    1a4c:	6f 91       	pop	r22
    1a4e:	5f 91       	pop	r21
    1a50:	4f 91       	pop	r20
    1a52:	3f 91       	pop	r19
    1a54:	2f 91       	pop	r18
    1a56:	0f 90       	pop	r0
    1a58:	0b be       	out	0x3b, r0	; 59
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_51>:
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	0b b6       	in	r0, 0x3b	; 59
    1a70:	0f 92       	push	r0
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
    1a8a:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <tc_tce0_ccc_callback>
    1a8e:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <tc_tce0_ccc_callback+0x1>
    1a92:	30 97       	sbiw	r30, 0x00	; 0
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <__vector_51+0x34>
    1a96:	19 95       	eicall
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0b be       	out	0x3b, r0	; 59
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_52>:
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	0b b6       	in	r0, 0x3b	; 59
    1aca:	0f 92       	push	r0
    1acc:	2f 93       	push	r18
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
    1ae4:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <tc_tce0_ccd_callback>
    1ae8:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <tc_tce0_ccd_callback+0x1>
    1aec:	30 97       	sbiw	r30, 0x00	; 0
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <__vector_52+0x34>
    1af0:	19 95       	eicall
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0b be       	out	0x3b, r0	; 59
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <__vector_53>:
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	0b b6       	in	r0, 0x3b	; 59
    1b24:	0f 92       	push	r0
    1b26:	2f 93       	push	r18
    1b28:	3f 93       	push	r19
    1b2a:	4f 93       	push	r20
    1b2c:	5f 93       	push	r21
    1b2e:	6f 93       	push	r22
    1b30:	7f 93       	push	r23
    1b32:	8f 93       	push	r24
    1b34:	9f 93       	push	r25
    1b36:	af 93       	push	r26
    1b38:	bf 93       	push	r27
    1b3a:	ef 93       	push	r30
    1b3c:	ff 93       	push	r31
    1b3e:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <tc_tce1_ovf_callback>
    1b42:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <tc_tce1_ovf_callback+0x1>
    1b46:	30 97       	sbiw	r30, 0x00	; 0
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <__vector_53+0x34>
    1b4a:	19 95       	eicall
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	bf 91       	pop	r27
    1b52:	af 91       	pop	r26
    1b54:	9f 91       	pop	r25
    1b56:	8f 91       	pop	r24
    1b58:	7f 91       	pop	r23
    1b5a:	6f 91       	pop	r22
    1b5c:	5f 91       	pop	r21
    1b5e:	4f 91       	pop	r20
    1b60:	3f 91       	pop	r19
    1b62:	2f 91       	pop	r18
    1b64:	0f 90       	pop	r0
    1b66:	0b be       	out	0x3b, r0	; 59
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <__vector_54>:
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	0b b6       	in	r0, 0x3b	; 59
    1b7e:	0f 92       	push	r0
    1b80:	2f 93       	push	r18
    1b82:	3f 93       	push	r19
    1b84:	4f 93       	push	r20
    1b86:	5f 93       	push	r21
    1b88:	6f 93       	push	r22
    1b8a:	7f 93       	push	r23
    1b8c:	8f 93       	push	r24
    1b8e:	9f 93       	push	r25
    1b90:	af 93       	push	r26
    1b92:	bf 93       	push	r27
    1b94:	ef 93       	push	r30
    1b96:	ff 93       	push	r31
    1b98:	e0 91 40 22 	lds	r30, 0x2240	; 0x802240 <tc_tce1_err_callback>
    1b9c:	f0 91 41 22 	lds	r31, 0x2241	; 0x802241 <tc_tce1_err_callback+0x1>
    1ba0:	30 97       	sbiw	r30, 0x00	; 0
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <__vector_54+0x34>
    1ba4:	19 95       	eicall
    1ba6:	ff 91       	pop	r31
    1ba8:	ef 91       	pop	r30
    1baa:	bf 91       	pop	r27
    1bac:	af 91       	pop	r26
    1bae:	9f 91       	pop	r25
    1bb0:	8f 91       	pop	r24
    1bb2:	7f 91       	pop	r23
    1bb4:	6f 91       	pop	r22
    1bb6:	5f 91       	pop	r21
    1bb8:	4f 91       	pop	r20
    1bba:	3f 91       	pop	r19
    1bbc:	2f 91       	pop	r18
    1bbe:	0f 90       	pop	r0
    1bc0:	0b be       	out	0x3b, r0	; 59
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	0f 90       	pop	r0
    1bc8:	1f 90       	pop	r1
    1bca:	18 95       	reti

00001bcc <__vector_55>:
    1bcc:	1f 92       	push	r1
    1bce:	0f 92       	push	r0
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	0f 92       	push	r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	0b b6       	in	r0, 0x3b	; 59
    1bd8:	0f 92       	push	r0
    1bda:	2f 93       	push	r18
    1bdc:	3f 93       	push	r19
    1bde:	4f 93       	push	r20
    1be0:	5f 93       	push	r21
    1be2:	6f 93       	push	r22
    1be4:	7f 93       	push	r23
    1be6:	8f 93       	push	r24
    1be8:	9f 93       	push	r25
    1bea:	af 93       	push	r26
    1bec:	bf 93       	push	r27
    1bee:	ef 93       	push	r30
    1bf0:	ff 93       	push	r31
    1bf2:	e0 91 3e 22 	lds	r30, 0x223E	; 0x80223e <tc_tce1_cca_callback>
    1bf6:	f0 91 3f 22 	lds	r31, 0x223F	; 0x80223f <tc_tce1_cca_callback+0x1>
    1bfa:	30 97       	sbiw	r30, 0x00	; 0
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <__vector_55+0x34>
    1bfe:	19 95       	eicall
    1c00:	ff 91       	pop	r31
    1c02:	ef 91       	pop	r30
    1c04:	bf 91       	pop	r27
    1c06:	af 91       	pop	r26
    1c08:	9f 91       	pop	r25
    1c0a:	8f 91       	pop	r24
    1c0c:	7f 91       	pop	r23
    1c0e:	6f 91       	pop	r22
    1c10:	5f 91       	pop	r21
    1c12:	4f 91       	pop	r20
    1c14:	3f 91       	pop	r19
    1c16:	2f 91       	pop	r18
    1c18:	0f 90       	pop	r0
    1c1a:	0b be       	out	0x3b, r0	; 59
    1c1c:	0f 90       	pop	r0
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	0f 90       	pop	r0
    1c22:	1f 90       	pop	r1
    1c24:	18 95       	reti

00001c26 <__vector_56>:
    1c26:	1f 92       	push	r1
    1c28:	0f 92       	push	r0
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	0f 92       	push	r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	0b b6       	in	r0, 0x3b	; 59
    1c32:	0f 92       	push	r0
    1c34:	2f 93       	push	r18
    1c36:	3f 93       	push	r19
    1c38:	4f 93       	push	r20
    1c3a:	5f 93       	push	r21
    1c3c:	6f 93       	push	r22
    1c3e:	7f 93       	push	r23
    1c40:	8f 93       	push	r24
    1c42:	9f 93       	push	r25
    1c44:	af 93       	push	r26
    1c46:	bf 93       	push	r27
    1c48:	ef 93       	push	r30
    1c4a:	ff 93       	push	r31
    1c4c:	e0 91 3c 22 	lds	r30, 0x223C	; 0x80223c <tc_tce1_ccb_callback>
    1c50:	f0 91 3d 22 	lds	r31, 0x223D	; 0x80223d <tc_tce1_ccb_callback+0x1>
    1c54:	30 97       	sbiw	r30, 0x00	; 0
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <__vector_56+0x34>
    1c58:	19 95       	eicall
    1c5a:	ff 91       	pop	r31
    1c5c:	ef 91       	pop	r30
    1c5e:	bf 91       	pop	r27
    1c60:	af 91       	pop	r26
    1c62:	9f 91       	pop	r25
    1c64:	8f 91       	pop	r24
    1c66:	7f 91       	pop	r23
    1c68:	6f 91       	pop	r22
    1c6a:	5f 91       	pop	r21
    1c6c:	4f 91       	pop	r20
    1c6e:	3f 91       	pop	r19
    1c70:	2f 91       	pop	r18
    1c72:	0f 90       	pop	r0
    1c74:	0b be       	out	0x3b, r0	; 59
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <__vector_108>:
    1c80:	1f 92       	push	r1
    1c82:	0f 92       	push	r0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	0f 92       	push	r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	0b b6       	in	r0, 0x3b	; 59
    1c8c:	0f 92       	push	r0
    1c8e:	2f 93       	push	r18
    1c90:	3f 93       	push	r19
    1c92:	4f 93       	push	r20
    1c94:	5f 93       	push	r21
    1c96:	6f 93       	push	r22
    1c98:	7f 93       	push	r23
    1c9a:	8f 93       	push	r24
    1c9c:	9f 93       	push	r25
    1c9e:	af 93       	push	r26
    1ca0:	bf 93       	push	r27
    1ca2:	ef 93       	push	r30
    1ca4:	ff 93       	push	r31
    1ca6:	e0 91 3a 22 	lds	r30, 0x223A	; 0x80223a <tc_tcf0_ovf_callback>
    1caa:	f0 91 3b 22 	lds	r31, 0x223B	; 0x80223b <tc_tcf0_ovf_callback+0x1>
    1cae:	30 97       	sbiw	r30, 0x00	; 0
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <__vector_108+0x34>
    1cb2:	19 95       	eicall
    1cb4:	ff 91       	pop	r31
    1cb6:	ef 91       	pop	r30
    1cb8:	bf 91       	pop	r27
    1cba:	af 91       	pop	r26
    1cbc:	9f 91       	pop	r25
    1cbe:	8f 91       	pop	r24
    1cc0:	7f 91       	pop	r23
    1cc2:	6f 91       	pop	r22
    1cc4:	5f 91       	pop	r21
    1cc6:	4f 91       	pop	r20
    1cc8:	3f 91       	pop	r19
    1cca:	2f 91       	pop	r18
    1ccc:	0f 90       	pop	r0
    1cce:	0b be       	out	0x3b, r0	; 59
    1cd0:	0f 90       	pop	r0
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0f 90       	pop	r0
    1cd6:	1f 90       	pop	r1
    1cd8:	18 95       	reti

00001cda <__vector_109>:
    1cda:	1f 92       	push	r1
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	0f 92       	push	r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	0b b6       	in	r0, 0x3b	; 59
    1ce6:	0f 92       	push	r0
    1ce8:	2f 93       	push	r18
    1cea:	3f 93       	push	r19
    1cec:	4f 93       	push	r20
    1cee:	5f 93       	push	r21
    1cf0:	6f 93       	push	r22
    1cf2:	7f 93       	push	r23
    1cf4:	8f 93       	push	r24
    1cf6:	9f 93       	push	r25
    1cf8:	af 93       	push	r26
    1cfa:	bf 93       	push	r27
    1cfc:	ef 93       	push	r30
    1cfe:	ff 93       	push	r31
    1d00:	e0 91 38 22 	lds	r30, 0x2238	; 0x802238 <tc_tcf0_err_callback>
    1d04:	f0 91 39 22 	lds	r31, 0x2239	; 0x802239 <tc_tcf0_err_callback+0x1>
    1d08:	30 97       	sbiw	r30, 0x00	; 0
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <__vector_109+0x34>
    1d0c:	19 95       	eicall
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	0b be       	out	0x3b, r0	; 59
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	0f 90       	pop	r0
    1d30:	1f 90       	pop	r1
    1d32:	18 95       	reti

00001d34 <__vector_110>:
    1d34:	1f 92       	push	r1
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	0b b6       	in	r0, 0x3b	; 59
    1d40:	0f 92       	push	r0
    1d42:	2f 93       	push	r18
    1d44:	3f 93       	push	r19
    1d46:	4f 93       	push	r20
    1d48:	5f 93       	push	r21
    1d4a:	6f 93       	push	r22
    1d4c:	7f 93       	push	r23
    1d4e:	8f 93       	push	r24
    1d50:	9f 93       	push	r25
    1d52:	af 93       	push	r26
    1d54:	bf 93       	push	r27
    1d56:	ef 93       	push	r30
    1d58:	ff 93       	push	r31
    1d5a:	e0 91 36 22 	lds	r30, 0x2236	; 0x802236 <tc_tcf0_cca_callback>
    1d5e:	f0 91 37 22 	lds	r31, 0x2237	; 0x802237 <tc_tcf0_cca_callback+0x1>
    1d62:	30 97       	sbiw	r30, 0x00	; 0
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <__vector_110+0x34>
    1d66:	19 95       	eicall
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	7f 91       	pop	r23
    1d76:	6f 91       	pop	r22
    1d78:	5f 91       	pop	r21
    1d7a:	4f 91       	pop	r20
    1d7c:	3f 91       	pop	r19
    1d7e:	2f 91       	pop	r18
    1d80:	0f 90       	pop	r0
    1d82:	0b be       	out	0x3b, r0	; 59
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0
    1d8a:	1f 90       	pop	r1
    1d8c:	18 95       	reti

00001d8e <__vector_111>:
    1d8e:	1f 92       	push	r1
    1d90:	0f 92       	push	r0
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	0f 92       	push	r0
    1d96:	11 24       	eor	r1, r1
    1d98:	0b b6       	in	r0, 0x3b	; 59
    1d9a:	0f 92       	push	r0
    1d9c:	2f 93       	push	r18
    1d9e:	3f 93       	push	r19
    1da0:	4f 93       	push	r20
    1da2:	5f 93       	push	r21
    1da4:	6f 93       	push	r22
    1da6:	7f 93       	push	r23
    1da8:	8f 93       	push	r24
    1daa:	9f 93       	push	r25
    1dac:	af 93       	push	r26
    1dae:	bf 93       	push	r27
    1db0:	ef 93       	push	r30
    1db2:	ff 93       	push	r31
    1db4:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <tc_tcf0_ccb_callback>
    1db8:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <tc_tcf0_ccb_callback+0x1>
    1dbc:	30 97       	sbiw	r30, 0x00	; 0
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <__vector_111+0x34>
    1dc0:	19 95       	eicall
    1dc2:	ff 91       	pop	r31
    1dc4:	ef 91       	pop	r30
    1dc6:	bf 91       	pop	r27
    1dc8:	af 91       	pop	r26
    1dca:	9f 91       	pop	r25
    1dcc:	8f 91       	pop	r24
    1dce:	7f 91       	pop	r23
    1dd0:	6f 91       	pop	r22
    1dd2:	5f 91       	pop	r21
    1dd4:	4f 91       	pop	r20
    1dd6:	3f 91       	pop	r19
    1dd8:	2f 91       	pop	r18
    1dda:	0f 90       	pop	r0
    1ddc:	0b be       	out	0x3b, r0	; 59
    1dde:	0f 90       	pop	r0
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	0f 90       	pop	r0
    1de4:	1f 90       	pop	r1
    1de6:	18 95       	reti

00001de8 <__vector_112>:
    1de8:	1f 92       	push	r1
    1dea:	0f 92       	push	r0
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	0f 92       	push	r0
    1df0:	11 24       	eor	r1, r1
    1df2:	0b b6       	in	r0, 0x3b	; 59
    1df4:	0f 92       	push	r0
    1df6:	2f 93       	push	r18
    1df8:	3f 93       	push	r19
    1dfa:	4f 93       	push	r20
    1dfc:	5f 93       	push	r21
    1dfe:	6f 93       	push	r22
    1e00:	7f 93       	push	r23
    1e02:	8f 93       	push	r24
    1e04:	9f 93       	push	r25
    1e06:	af 93       	push	r26
    1e08:	bf 93       	push	r27
    1e0a:	ef 93       	push	r30
    1e0c:	ff 93       	push	r31
    1e0e:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <tc_tcf0_ccc_callback>
    1e12:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <tc_tcf0_ccc_callback+0x1>
    1e16:	30 97       	sbiw	r30, 0x00	; 0
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <__vector_112+0x34>
    1e1a:	19 95       	eicall
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	0f 90       	pop	r0
    1e36:	0b be       	out	0x3b, r0	; 59
    1e38:	0f 90       	pop	r0
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	0f 90       	pop	r0
    1e3e:	1f 90       	pop	r1
    1e40:	18 95       	reti

00001e42 <__vector_113>:
    1e42:	1f 92       	push	r1
    1e44:	0f 92       	push	r0
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	0f 92       	push	r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	0b b6       	in	r0, 0x3b	; 59
    1e4e:	0f 92       	push	r0
    1e50:	2f 93       	push	r18
    1e52:	3f 93       	push	r19
    1e54:	4f 93       	push	r20
    1e56:	5f 93       	push	r21
    1e58:	6f 93       	push	r22
    1e5a:	7f 93       	push	r23
    1e5c:	8f 93       	push	r24
    1e5e:	9f 93       	push	r25
    1e60:	af 93       	push	r26
    1e62:	bf 93       	push	r27
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
    1e68:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <tc_tcf0_ccd_callback>
    1e6c:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <tc_tcf0_ccd_callback+0x1>
    1e70:	30 97       	sbiw	r30, 0x00	; 0
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <__vector_113+0x34>
    1e74:	19 95       	eicall
    1e76:	ff 91       	pop	r31
    1e78:	ef 91       	pop	r30
    1e7a:	bf 91       	pop	r27
    1e7c:	af 91       	pop	r26
    1e7e:	9f 91       	pop	r25
    1e80:	8f 91       	pop	r24
    1e82:	7f 91       	pop	r23
    1e84:	6f 91       	pop	r22
    1e86:	5f 91       	pop	r21
    1e88:	4f 91       	pop	r20
    1e8a:	3f 91       	pop	r19
    1e8c:	2f 91       	pop	r18
    1e8e:	0f 90       	pop	r0
    1e90:	0b be       	out	0x3b, r0	; 59
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	0f 90       	pop	r0
    1e98:	1f 90       	pop	r1
    1e9a:	18 95       	reti

00001e9c <tc_enable>:
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	1f 92       	push	r1
    1ea4:	1f 92       	push	r1
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	2f b7       	in	r18, 0x3f	; 63
    1eac:	2a 83       	std	Y+2, r18	; 0x02
    1eae:	f8 94       	cli
    1eb0:	1a 81       	ldd	r17, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	39 2f       	mov	r19, r25
    1eb6:	21 15       	cp	r18, r1
    1eb8:	88 e0       	ldi	r24, 0x08	; 8
    1eba:	38 07       	cpc	r19, r24
    1ebc:	39 f4       	brne	.+14     	; 0x1ecc <tc_enable+0x30>
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	d8 d3       	rcall	.+1968   	; 0x2674 <sysclk_enable_module>
    1ec4:	64 e0       	ldi	r22, 0x04	; 4
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	d5 d3       	rcall	.+1962   	; 0x2674 <sysclk_enable_module>
    1eca:	43 c0       	rjmp	.+134    	; 0x1f52 <tc_enable+0xb6>
    1ecc:	20 34       	cpi	r18, 0x40	; 64
    1ece:	88 e0       	ldi	r24, 0x08	; 8
    1ed0:	38 07       	cpc	r19, r24
    1ed2:	39 f4       	brne	.+14     	; 0x1ee2 <tc_enable+0x46>
    1ed4:	62 e0       	ldi	r22, 0x02	; 2
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	cd d3       	rcall	.+1946   	; 0x2674 <sysclk_enable_module>
    1eda:	64 e0       	ldi	r22, 0x04	; 4
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	ca d3       	rcall	.+1940   	; 0x2674 <sysclk_enable_module>
    1ee0:	38 c0       	rjmp	.+112    	; 0x1f52 <tc_enable+0xb6>
    1ee2:	21 15       	cp	r18, r1
    1ee4:	89 e0       	ldi	r24, 0x09	; 9
    1ee6:	38 07       	cpc	r19, r24
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <tc_enable+0x5c>
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	84 e0       	ldi	r24, 0x04	; 4
    1eee:	c2 d3       	rcall	.+1924   	; 0x2674 <sysclk_enable_module>
    1ef0:	64 e0       	ldi	r22, 0x04	; 4
    1ef2:	84 e0       	ldi	r24, 0x04	; 4
    1ef4:	bf d3       	rcall	.+1918   	; 0x2674 <sysclk_enable_module>
    1ef6:	2d c0       	rjmp	.+90     	; 0x1f52 <tc_enable+0xb6>
    1ef8:	20 34       	cpi	r18, 0x40	; 64
    1efa:	89 e0       	ldi	r24, 0x09	; 9
    1efc:	38 07       	cpc	r19, r24
    1efe:	39 f4       	brne	.+14     	; 0x1f0e <tc_enable+0x72>
    1f00:	62 e0       	ldi	r22, 0x02	; 2
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	b7 d3       	rcall	.+1902   	; 0x2674 <sysclk_enable_module>
    1f06:	64 e0       	ldi	r22, 0x04	; 4
    1f08:	84 e0       	ldi	r24, 0x04	; 4
    1f0a:	b4 d3       	rcall	.+1896   	; 0x2674 <sysclk_enable_module>
    1f0c:	22 c0       	rjmp	.+68     	; 0x1f52 <tc_enable+0xb6>
    1f0e:	21 15       	cp	r18, r1
    1f10:	8a e0       	ldi	r24, 0x0A	; 10
    1f12:	38 07       	cpc	r19, r24
    1f14:	39 f4       	brne	.+14     	; 0x1f24 <tc_enable+0x88>
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	85 e0       	ldi	r24, 0x05	; 5
    1f1a:	ac d3       	rcall	.+1880   	; 0x2674 <sysclk_enable_module>
    1f1c:	64 e0       	ldi	r22, 0x04	; 4
    1f1e:	85 e0       	ldi	r24, 0x05	; 5
    1f20:	a9 d3       	rcall	.+1874   	; 0x2674 <sysclk_enable_module>
    1f22:	17 c0       	rjmp	.+46     	; 0x1f52 <tc_enable+0xb6>
    1f24:	20 34       	cpi	r18, 0x40	; 64
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
    1f28:	38 07       	cpc	r19, r24
    1f2a:	39 f4       	brne	.+14     	; 0x1f3a <tc_enable+0x9e>
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
    1f2e:	85 e0       	ldi	r24, 0x05	; 5
    1f30:	a1 d3       	rcall	.+1858   	; 0x2674 <sysclk_enable_module>
    1f32:	64 e0       	ldi	r22, 0x04	; 4
    1f34:	85 e0       	ldi	r24, 0x05	; 5
    1f36:	9e d3       	rcall	.+1852   	; 0x2674 <sysclk_enable_module>
    1f38:	0c c0       	rjmp	.+24     	; 0x1f52 <tc_enable+0xb6>
    1f3a:	21 15       	cp	r18, r1
    1f3c:	3b 40       	sbci	r19, 0x0B	; 11
    1f3e:	39 f4       	brne	.+14     	; 0x1f4e <tc_enable+0xb2>
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	86 e0       	ldi	r24, 0x06	; 6
    1f44:	97 d3       	rcall	.+1838   	; 0x2674 <sysclk_enable_module>
    1f46:	64 e0       	ldi	r22, 0x04	; 4
    1f48:	86 e0       	ldi	r24, 0x06	; 6
    1f4a:	94 d3       	rcall	.+1832   	; 0x2674 <sysclk_enable_module>
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <tc_enable+0xb6>
    1f4e:	1f bf       	out	0x3f, r17	; 63
    1f50:	10 c0       	rjmp	.+32     	; 0x1f72 <tc_enable+0xd6>
    1f52:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <sleepmgr_locks+0x1>
    1f56:	8f 3f       	cpi	r24, 0xFF	; 255
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <tc_enable+0xc0>
    1f5a:	ff cf       	rjmp	.-2      	; 0x1f5a <tc_enable+0xbe>
    1f5c:	8f b7       	in	r24, 0x3f	; 63
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	f8 94       	cli
    1f62:	99 81       	ldd	r25, Y+1	; 0x01
    1f64:	ea e4       	ldi	r30, 0x4A	; 74
    1f66:	f3 e2       	ldi	r31, 0x23	; 35
    1f68:	81 81       	ldd	r24, Z+1	; 0x01
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	81 83       	std	Z+1, r24	; 0x01
    1f6e:	9f bf       	out	0x3f, r25	; 63
    1f70:	1f bf       	out	0x3f, r17	; 63
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	08 95       	ret

00001f7e <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1f7e:	81 15       	cp	r24, r1
    1f80:	28 e0       	ldi	r18, 0x08	; 8
    1f82:	92 07       	cpc	r25, r18
    1f84:	29 f4       	brne	.+10     	; 0x1f90 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1f86:	60 93 76 22 	sts	0x2276, r22	; 0x802276 <tc_tcc0_ovf_callback>
    1f8a:	70 93 77 22 	sts	0x2277, r23	; 0x802277 <tc_tcc0_ovf_callback+0x1>
    1f8e:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1f90:	80 34       	cpi	r24, 0x40	; 64
    1f92:	28 e0       	ldi	r18, 0x08	; 8
    1f94:	92 07       	cpc	r25, r18
    1f96:	29 f4       	brne	.+10     	; 0x1fa2 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    1f98:	60 93 6a 22 	sts	0x226A, r22	; 0x80226a <tc_tcc1_ovf_callback>
    1f9c:	70 93 6b 22 	sts	0x226B, r23	; 0x80226b <tc_tcc1_ovf_callback+0x1>
    1fa0:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1fa2:	81 15       	cp	r24, r1
    1fa4:	29 e0       	ldi	r18, 0x09	; 9
    1fa6:	92 07       	cpc	r25, r18
    1fa8:	29 f4       	brne	.+10     	; 0x1fb4 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    1faa:	60 93 62 22 	sts	0x2262, r22	; 0x802262 <tc_tcd0_ovf_callback>
    1fae:	70 93 63 22 	sts	0x2263, r23	; 0x802263 <tc_tcd0_ovf_callback+0x1>
    1fb2:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1fb4:	80 34       	cpi	r24, 0x40	; 64
    1fb6:	29 e0       	ldi	r18, 0x09	; 9
    1fb8:	92 07       	cpc	r25, r18
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1fbc:	60 93 56 22 	sts	0x2256, r22	; 0x802256 <tc_tcd1_ovf_callback>
    1fc0:	70 93 57 22 	sts	0x2257, r23	; 0x802257 <tc_tcd1_ovf_callback+0x1>
    1fc4:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1fc6:	81 15       	cp	r24, r1
    1fc8:	2a e0       	ldi	r18, 0x0A	; 10
    1fca:	92 07       	cpc	r25, r18
    1fcc:	29 f4       	brne	.+10     	; 0x1fd8 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1fce:	60 93 4e 22 	sts	0x224E, r22	; 0x80224e <tc_tce0_ovf_callback>
    1fd2:	70 93 4f 22 	sts	0x224F, r23	; 0x80224f <tc_tce0_ovf_callback+0x1>
    1fd6:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1fd8:	80 34       	cpi	r24, 0x40	; 64
    1fda:	2a e0       	ldi	r18, 0x0A	; 10
    1fdc:	92 07       	cpc	r25, r18
    1fde:	29 f4       	brne	.+10     	; 0x1fea <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    1fe0:	60 93 42 22 	sts	0x2242, r22	; 0x802242 <tc_tce1_ovf_callback>
    1fe4:	70 93 43 22 	sts	0x2243, r23	; 0x802243 <tc_tce1_ovf_callback+0x1>
    1fe8:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1fea:	81 15       	cp	r24, r1
    1fec:	9b 40       	sbci	r25, 0x0B	; 11
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    1ff0:	60 93 3a 22 	sts	0x223A, r22	; 0x80223a <tc_tcf0_ovf_callback>
    1ff4:	70 93 3b 22 	sts	0x223B, r23	; 0x80223b <tc_tcf0_ovf_callback+0x1>
    1ff8:	08 95       	ret

00001ffa <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    200c:	d9 01       	movw	r26, r18
    200e:	c8 01       	movw	r24, r16
    2010:	b6 95       	lsr	r27
    2012:	a7 95       	ror	r26
    2014:	97 95       	ror	r25
    2016:	87 95       	ror	r24
    2018:	48 17       	cp	r20, r24
    201a:	59 07       	cpc	r21, r25
    201c:	6a 07       	cpc	r22, r26
    201e:	7b 07       	cpc	r23, r27
    2020:	70 f4       	brcc	.+28     	; 0x203e <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    2022:	6a 01       	movw	r12, r20
    2024:	7b 01       	movw	r14, r22
    2026:	cc 0c       	add	r12, r12
    2028:	dd 1c       	adc	r13, r13
    202a:	ee 1c       	adc	r14, r14
    202c:	ff 1c       	adc	r15, r15
    202e:	c9 01       	movw	r24, r18
    2030:	b8 01       	movw	r22, r16
    2032:	a7 01       	movw	r20, r14
    2034:	96 01       	movw	r18, r12
    2036:	f6 d5       	rcall	.+3052   	; 0x2c24 <__udivmodsi4>
    2038:	21 50       	subi	r18, 0x01	; 1
    203a:	31 09       	sbc	r19, r1
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    2042:	83 2f       	mov	r24, r19
    2044:	8f 70       	andi	r24, 0x0F	; 15
    2046:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    2048:	2e 83       	std	Y+6, r18	; 0x06
}
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	ff 90       	pop	r15
    2054:	ef 90       	pop	r14
    2056:	df 90       	pop	r13
    2058:	cf 90       	pop	r12
    205a:	08 95       	ret

0000205c <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    205c:	df 92       	push	r13
    205e:	ef 92       	push	r14
    2060:	ff 92       	push	r15
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	1f 92       	push	r1
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	7c 01       	movw	r14, r24
    2072:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	09 f4       	brne	.+2      	; 0x207a <usart_init_spi+0x1e>
    2078:	b2 c1       	rjmp	.+868    	; 0x23de <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    207a:	80 3c       	cpi	r24, 0xC0	; 192
    207c:	91 05       	cpc	r25, r1
    207e:	21 f4       	brne	.+8      	; 0x2088 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2080:	60 e1       	ldi	r22, 0x10	; 16
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	f7 d2       	rcall	.+1518   	; 0x2674 <sysclk_enable_module>
    2086:	ab c1       	rjmp	.+854    	; 0x23de <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2088:	80 e8       	ldi	r24, 0x80	; 128
    208a:	e8 16       	cp	r14, r24
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	f8 06       	cpc	r15, r24
    2090:	21 f4       	brne	.+8      	; 0x209a <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	ee d2       	rcall	.+1500   	; 0x2674 <sysclk_enable_module>
    2098:	a2 c1       	rjmp	.+836    	; 0x23de <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    209a:	e1 14       	cp	r14, r1
    209c:	e1 e0       	ldi	r30, 0x01	; 1
    209e:	fe 06       	cpc	r15, r30
    20a0:	21 f4       	brne	.+8      	; 0x20aa <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	e6 d2       	rcall	.+1484   	; 0x2674 <sysclk_enable_module>
    20a8:	9a c1       	rjmp	.+820    	; 0x23de <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    20aa:	f0 e8       	ldi	r31, 0x80	; 128
    20ac:	ef 16       	cp	r14, r31
    20ae:	f3 e0       	ldi	r31, 0x03	; 3
    20b0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    20b2:	21 f4       	brne	.+8      	; 0x20bc <usart_init_spi+0x60>
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	dd d2       	rcall	.+1466   	; 0x2674 <sysclk_enable_module>
    20ba:	91 c1       	rjmp	.+802    	; 0x23de <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    20bc:	30 e9       	ldi	r19, 0x90	; 144
    20be:	e3 16       	cp	r14, r19
    20c0:	33 e0       	ldi	r19, 0x03	; 3
    20c2:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    20c4:	21 f4       	brne	.+8      	; 0x20ce <usart_init_spi+0x72>
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	d4 d2       	rcall	.+1448   	; 0x2674 <sysclk_enable_module>
    20cc:	88 c1       	rjmp	.+784    	; 0x23de <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    20ce:	e1 14       	cp	r14, r1
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    20d4:	21 f4       	brne	.+8      	; 0x20de <usart_init_spi+0x82>
    20d6:	62 e0       	ldi	r22, 0x02	; 2
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	cc d2       	rcall	.+1432   	; 0x2674 <sysclk_enable_module>
    20dc:	80 c1       	rjmp	.+768    	; 0x23de <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    20de:	e0 e4       	ldi	r30, 0x40	; 64
    20e0:	ee 16       	cp	r14, r30
    20e2:	e2 e0       	ldi	r30, 0x02	; 2
    20e4:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    20e6:	21 f4       	brne	.+8      	; 0x20f0 <usart_init_spi+0x94>
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	c3 d2       	rcall	.+1414   	; 0x2674 <sysclk_enable_module>
    20ee:	77 c1       	rjmp	.+750    	; 0x23de <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    20f0:	f0 e2       	ldi	r31, 0x20	; 32
    20f2:	ef 16       	cp	r14, r31
    20f4:	f3 e0       	ldi	r31, 0x03	; 3
    20f6:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    20f8:	21 f4       	brne	.+8      	; 0x2102 <usart_init_spi+0xa6>
    20fa:	64 e0       	ldi	r22, 0x04	; 4
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	ba d2       	rcall	.+1396   	; 0x2674 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2100:	6e c1       	rjmp	.+732    	; 0x23de <usart_init_spi+0x382>
    2102:	e1 14       	cp	r14, r1
    2104:	38 e0       	ldi	r19, 0x08	; 8
    2106:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2108:	21 f4       	brne	.+8      	; 0x2112 <usart_init_spi+0xb6>
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	b2 d2       	rcall	.+1380   	; 0x2674 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2110:	66 c1       	rjmp	.+716    	; 0x23de <usart_init_spi+0x382>
    2112:	e1 14       	cp	r14, r1
    2114:	89 e0       	ldi	r24, 0x09	; 9
    2116:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2118:	21 f4       	brne	.+8      	; 0x2122 <usart_init_spi+0xc6>
    211a:	61 e0       	ldi	r22, 0x01	; 1
    211c:	84 e0       	ldi	r24, 0x04	; 4
    211e:	aa d2       	rcall	.+1364   	; 0x2674 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2120:	5e c1       	rjmp	.+700    	; 0x23de <usart_init_spi+0x382>
    2122:	e1 14       	cp	r14, r1
    2124:	ea e0       	ldi	r30, 0x0A	; 10
    2126:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2128:	21 f4       	brne	.+8      	; 0x2132 <usart_init_spi+0xd6>
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	85 e0       	ldi	r24, 0x05	; 5
    212e:	a2 d2       	rcall	.+1348   	; 0x2674 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2130:	56 c1       	rjmp	.+684    	; 0x23de <usart_init_spi+0x382>
    2132:	e1 14       	cp	r14, r1
    2134:	fb e0       	ldi	r31, 0x0B	; 11
    2136:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2138:	21 f4       	brne	.+8      	; 0x2142 <usart_init_spi+0xe6>
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	86 e0       	ldi	r24, 0x06	; 6
    213e:	9a d2       	rcall	.+1332   	; 0x2674 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2140:	4e c1       	rjmp	.+668    	; 0x23de <usart_init_spi+0x382>
    2142:	30 e4       	ldi	r19, 0x40	; 64
    2144:	e3 16       	cp	r14, r19
    2146:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2148:	f3 06       	cpc	r15, r19
    214a:	21 f4       	brne	.+8      	; 0x2154 <usart_init_spi+0xf8>
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	91 d2       	rcall	.+1314   	; 0x2674 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2152:	45 c1       	rjmp	.+650    	; 0x23de <usart_init_spi+0x382>
    2154:	80 e4       	ldi	r24, 0x40	; 64
    2156:	e8 16       	cp	r14, r24
    2158:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    215a:	f8 06       	cpc	r15, r24
    215c:	21 f4       	brne	.+8      	; 0x2166 <usart_init_spi+0x10a>
    215e:	62 e0       	ldi	r22, 0x02	; 2
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	88 d2       	rcall	.+1296   	; 0x2674 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2164:	3c c1       	rjmp	.+632    	; 0x23de <usart_init_spi+0x382>
    2166:	e0 e4       	ldi	r30, 0x40	; 64
    2168:	ee 16       	cp	r14, r30
    216a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    216c:	fe 06       	cpc	r15, r30
    216e:	21 f4       	brne	.+8      	; 0x2178 <usart_init_spi+0x11c>
    2170:	62 e0       	ldi	r22, 0x02	; 2
    2172:	85 e0       	ldi	r24, 0x05	; 5
    2174:	7f d2       	rcall	.+1278   	; 0x2674 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2176:	33 c1       	rjmp	.+614    	; 0x23de <usart_init_spi+0x382>
    2178:	f0 e9       	ldi	r31, 0x90	; 144
    217a:	ef 16       	cp	r14, r31
    217c:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    217e:	ff 06       	cpc	r15, r31
    2180:	21 f4       	brne	.+8      	; 0x218a <usart_init_spi+0x12e>
    2182:	64 e0       	ldi	r22, 0x04	; 4
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	76 d2       	rcall	.+1260   	; 0x2674 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2188:	2a c1       	rjmp	.+596    	; 0x23de <usart_init_spi+0x382>
    218a:	30 e9       	ldi	r19, 0x90	; 144
    218c:	e3 16       	cp	r14, r19
    218e:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2190:	f3 06       	cpc	r15, r19
    2192:	21 f4       	brne	.+8      	; 0x219c <usart_init_spi+0x140>
    2194:	64 e0       	ldi	r22, 0x04	; 4
    2196:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2198:	6d d2       	rcall	.+1242   	; 0x2674 <sysclk_enable_module>
    219a:	21 c1       	rjmp	.+578    	; 0x23de <usart_init_spi+0x382>
    219c:	80 e9       	ldi	r24, 0x90	; 144
    219e:	e8 16       	cp	r14, r24
    21a0:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    21a2:	f8 06       	cpc	r15, r24
    21a4:	21 f4       	brne	.+8      	; 0x21ae <usart_init_spi+0x152>
    21a6:	64 e0       	ldi	r22, 0x04	; 4
    21a8:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    21aa:	64 d2       	rcall	.+1224   	; 0x2674 <sysclk_enable_module>
    21ac:	18 c1       	rjmp	.+560    	; 0x23de <usart_init_spi+0x382>
    21ae:	e0 e9       	ldi	r30, 0x90	; 144
    21b0:	ee 16       	cp	r14, r30
    21b2:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    21b4:	fe 06       	cpc	r15, r30
    21b6:	21 f4       	brne	.+8      	; 0x21c0 <usart_init_spi+0x164>
    21b8:	64 e0       	ldi	r22, 0x04	; 4
    21ba:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    21bc:	5b d2       	rcall	.+1206   	; 0x2674 <sysclk_enable_module>
    21be:	0f c1       	rjmp	.+542    	; 0x23de <usart_init_spi+0x382>
    21c0:	f0 ec       	ldi	r31, 0xC0	; 192
    21c2:	ef 16       	cp	r14, r31
    21c4:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    21c6:	ff 06       	cpc	r15, r31
    21c8:	21 f4       	brne	.+8      	; 0x21d2 <usart_init_spi+0x176>
    21ca:	68 e0       	ldi	r22, 0x08	; 8
    21cc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    21ce:	52 d2       	rcall	.+1188   	; 0x2674 <sysclk_enable_module>
    21d0:	06 c1       	rjmp	.+524    	; 0x23de <usart_init_spi+0x382>
    21d2:	30 ec       	ldi	r19, 0xC0	; 192
    21d4:	e3 16       	cp	r14, r19
    21d6:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    21d8:	f3 06       	cpc	r15, r19
    21da:	21 f4       	brne	.+8      	; 0x21e4 <usart_init_spi+0x188>
    21dc:	68 e0       	ldi	r22, 0x08	; 8
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	49 d2       	rcall	.+1170   	; 0x2674 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    21e2:	fd c0       	rjmp	.+506    	; 0x23de <usart_init_spi+0x382>
    21e4:	80 ea       	ldi	r24, 0xA0	; 160
    21e6:	e8 16       	cp	r14, r24
    21e8:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    21ea:	f8 06       	cpc	r15, r24
    21ec:	61 f4       	brne	.+24     	; 0x2206 <usart_init_spi+0x1aa>
    21ee:	60 e1       	ldi	r22, 0x10	; 16
    21f0:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    21f2:	40 d2       	rcall	.+1152   	; 0x2674 <sysclk_enable_module>
    21f4:	e0 ea       	ldi	r30, 0xA0	; 160
    21f6:	f8 e0       	ldi	r31, 0x08	; 8
    21f8:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    21fa:	8f 7e       	andi	r24, 0xEF	; 239
    21fc:	84 83       	std	Z+4, r24	; 0x04
    21fe:	f8 01       	movw	r30, r16
    2200:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2202:	22 50       	subi	r18, 0x02	; 2
    2204:	4c c0       	rjmp	.+152    	; 0x229e <usart_init_spi+0x242>
    2206:	f0 ea       	ldi	r31, 0xA0	; 160
    2208:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    220a:	f9 e0       	ldi	r31, 0x09	; 9
    220c:	ff 06       	cpc	r15, r31
    220e:	21 f4       	brne	.+8      	; 0x2218 <usart_init_spi+0x1bc>
    2210:	60 e1       	ldi	r22, 0x10	; 16
    2212:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2214:	2f d2       	rcall	.+1118   	; 0x2674 <sysclk_enable_module>
    2216:	e3 c0       	rjmp	.+454    	; 0x23de <usart_init_spi+0x382>
    2218:	30 ea       	ldi	r19, 0xA0	; 160
    221a:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    221c:	3a e0       	ldi	r19, 0x0A	; 10
    221e:	f3 06       	cpc	r15, r19
    2220:	21 f4       	brne	.+8      	; 0x222a <usart_init_spi+0x1ce>
    2222:	60 e1       	ldi	r22, 0x10	; 16
    2224:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2226:	26 d2       	rcall	.+1100   	; 0x2674 <sysclk_enable_module>
    2228:	da c0       	rjmp	.+436    	; 0x23de <usart_init_spi+0x382>
    222a:	80 ea       	ldi	r24, 0xA0	; 160
    222c:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    222e:	8b e0       	ldi	r24, 0x0B	; 11
    2230:	f8 06       	cpc	r15, r24
    2232:	21 f4       	brne	.+8      	; 0x223c <usart_init_spi+0x1e0>
    2234:	60 e1       	ldi	r22, 0x10	; 16
    2236:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2238:	1d d2       	rcall	.+1082   	; 0x2674 <sysclk_enable_module>
    223a:	d1 c0       	rjmp	.+418    	; 0x23de <usart_init_spi+0x382>
    223c:	e0 eb       	ldi	r30, 0xB0	; 176
    223e:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2240:	e8 e0       	ldi	r30, 0x08	; 8
    2242:	fe 06       	cpc	r15, r30
    2244:	21 f4       	brne	.+8      	; 0x224e <usart_init_spi+0x1f2>
    2246:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	14 d2       	rcall	.+1064   	; 0x2674 <sysclk_enable_module>
    224c:	c8 c0       	rjmp	.+400    	; 0x23de <usart_init_spi+0x382>
    224e:	f0 eb       	ldi	r31, 0xB0	; 176
    2250:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2252:	f9 e0       	ldi	r31, 0x09	; 9
    2254:	ff 06       	cpc	r15, r31
    2256:	21 f4       	brne	.+8      	; 0x2260 <usart_init_spi+0x204>
    2258:	60 e2       	ldi	r22, 0x20	; 32
    225a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    225c:	0b d2       	rcall	.+1046   	; 0x2674 <sysclk_enable_module>
    225e:	bf c0       	rjmp	.+382    	; 0x23de <usart_init_spi+0x382>
    2260:	30 e8       	ldi	r19, 0x80	; 128
    2262:	e3 16       	cp	r14, r19
    2264:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2266:	f3 06       	cpc	r15, r19
    2268:	21 f4       	brne	.+8      	; 0x2272 <usart_init_spi+0x216>
    226a:	60 e4       	ldi	r22, 0x40	; 64
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	02 d2       	rcall	.+1028   	; 0x2674 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2270:	b6 c0       	rjmp	.+364    	; 0x23de <usart_init_spi+0x382>
    2272:	80 ea       	ldi	r24, 0xA0	; 160
    2274:	e8 16       	cp	r14, r24
    2276:	84 e0       	ldi	r24, 0x04	; 4
    2278:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    227a:	21 f4       	brne	.+8      	; 0x2284 <usart_init_spi+0x228>
    227c:	60 e4       	ldi	r22, 0x40	; 64
    227e:	85 e0       	ldi	r24, 0x05	; 5
    2280:	f9 d1       	rcall	.+1010   	; 0x2674 <sysclk_enable_module>
    2282:	ad c0       	rjmp	.+346    	; 0x23de <usart_init_spi+0x382>
    2284:	f7 01       	movw	r30, r14
    2286:	84 81       	ldd	r24, Z+4	; 0x04
    2288:	8f 7e       	andi	r24, 0xEF	; 239
    228a:	84 83       	std	Z+4, r24	; 0x04
    228c:	fb 01       	movw	r30, r22
    228e:	24 81       	ldd	r18, Z+4	; 0x04
    2290:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2292:	c7 01       	movw	r24, r14
    2294:	f0 ea       	ldi	r31, 0xA0	; 160
    2296:	ef 16       	cp	r14, r31
    2298:	f8 e0       	ldi	r31, 0x08	; 8
    229a:	ff 06       	cpc	r15, r31
    229c:	49 f4       	brne	.+18     	; 0x22b0 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    229e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    22a2:	84 fd       	sbrc	r24, 4
    22a4:	a5 c0       	rjmp	.+330    	; 0x23f0 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    22a6:	0f 2e       	mov	r0, r31
    22a8:	f1 e1       	ldi	r31, 0x11	; 17
    22aa:	df 2e       	mov	r13, r31
    22ac:	f0 2d       	mov	r31, r0
    22ae:	a4 c0       	rjmp	.+328    	; 0x23f8 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    22b0:	80 3b       	cpi	r24, 0xB0	; 176
    22b2:	38 e0       	ldi	r19, 0x08	; 8
    22b4:	93 07       	cpc	r25, r19
    22b6:	91 f0       	breq	.+36     	; 0x22dc <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    22b8:	80 3a       	cpi	r24, 0xA0	; 160
    22ba:	e9 e0       	ldi	r30, 0x09	; 9
    22bc:	9e 07       	cpc	r25, r30
    22be:	49 f4       	brne	.+18     	; 0x22d2 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    22c0:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    22c4:	34 fd       	sbrc	r19, 4
    22c6:	9b c0       	rjmp	.+310    	; 0x23fe <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    22c8:	0f 2e       	mov	r0, r31
    22ca:	f9 e1       	ldi	r31, 0x19	; 25
    22cc:	df 2e       	mov	r13, r31
    22ce:	f0 2d       	mov	r31, r0
    22d0:	16 c0       	rjmp	.+44     	; 0x22fe <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    22d2:	80 3b       	cpi	r24, 0xB0	; 176
    22d4:	f9 e0       	ldi	r31, 0x09	; 9
    22d6:	9f 07       	cpc	r25, r31
    22d8:	f1 f0       	breq	.+60     	; 0x2316 <usart_init_spi+0x2ba>
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    22dc:	0f 2e       	mov	r0, r31
    22de:	f5 e1       	ldi	r31, 0x15	; 21
    22e0:	df 2e       	mov	r13, r31
    22e2:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    22e4:	80 3a       	cpi	r24, 0xA0	; 160
    22e6:	3a e0       	ldi	r19, 0x0A	; 10
    22e8:	93 07       	cpc	r25, r19
    22ea:	49 f4       	brne	.+18     	; 0x22fe <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    22ec:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    22f0:	84 fd       	sbrc	r24, 4
    22f2:	8a c0       	rjmp	.+276    	; 0x2408 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    22f4:	0f 2e       	mov	r0, r31
    22f6:	f1 e2       	ldi	r31, 0x21	; 33
    22f8:	df 2e       	mov	r13, r31
    22fa:	f0 2d       	mov	r31, r0
    22fc:	15 c0       	rjmp	.+42     	; 0x2328 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    22fe:	80 3a       	cpi	r24, 0xA0	; 160
    2300:	9b 40       	sbci	r25, 0x0B	; 11
    2302:	91 f4       	brne	.+36     	; 0x2328 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    2304:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    2308:	84 fd       	sbrc	r24, 4
    230a:	0a c0       	rjmp	.+20     	; 0x2320 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    230c:	0f 2e       	mov	r0, r31
    230e:	f9 e2       	ldi	r31, 0x29	; 41
    2310:	df 2e       	mov	r13, r31
    2312:	f0 2d       	mov	r31, r0
    2314:	09 c0       	rjmp	.+18     	; 0x2328 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    2316:	0f 2e       	mov	r0, r31
    2318:	fd e1       	ldi	r31, 0x1D	; 29
    231a:	df 2e       	mov	r13, r31
    231c:	f0 2d       	mov	r31, r0
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    2320:	0f 2e       	mov	r0, r31
    2322:	fd e2       	ldi	r31, 0x2D	; 45
    2324:	df 2e       	mov	r13, r31
    2326:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2328:	ed 2d       	mov	r30, r13
    232a:	e6 95       	lsr	r30
    232c:	e6 95       	lsr	r30
    232e:	e6 95       	lsr	r30
    2330:	30 e2       	ldi	r19, 0x20	; 32
    2332:	e3 9f       	mul	r30, r19
    2334:	f0 01       	movw	r30, r0
    2336:	11 24       	eor	r1, r1
    2338:	fa 5f       	subi	r31, 0xFA	; 250
    233a:	3d 2d       	mov	r19, r13
    233c:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	03 2e       	mov	r0, r19
    2344:	02 c0       	rjmp	.+4      	; 0x234a <usart_init_spi+0x2ee>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    234e:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    2350:	22 30       	cpi	r18, 0x02	; 2
    2352:	10 f0       	brcs	.+4      	; 0x2358 <usart_init_spi+0x2fc>
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	01 c0       	rjmp	.+2      	; 0x235a <usart_init_spi+0x2fe>
    2358:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    235a:	df 01       	movw	r26, r30
    235c:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    235e:	a3 0f       	add	r26, r19
    2360:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2362:	9f b7       	in	r25, 0x3f	; 63
    2364:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2366:	f8 94       	cli
	return flags;
    2368:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    236a:	2c 91       	ld	r18, X
    236c:	27 70       	andi	r18, 0x07	; 7
    236e:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    2370:	9c 91       	ld	r25, X
    2372:	94 2b       	or	r25, r20
    2374:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2376:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2378:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    237a:	f7 01       	movw	r30, r14
    237c:	85 81       	ldd	r24, Z+5	; 0x05
    237e:	80 6c       	ori	r24, 0xC0	; 192
    2380:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    2382:	f8 01       	movw	r30, r16
    2384:	84 81       	ldd	r24, Z+4	; 0x04
    2386:	8d 7f       	andi	r24, 0xFD	; 253
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	29 f4       	brne	.+10     	; 0x2396 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    238c:	f7 01       	movw	r30, r14
    238e:	85 81       	ldd	r24, Z+5	; 0x05
    2390:	82 60       	ori	r24, 0x02	; 2
    2392:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    2394:	04 c0       	rjmp	.+8      	; 0x239e <usart_init_spi+0x342>
    2396:	f7 01       	movw	r30, r14
    2398:	85 81       	ldd	r24, Z+5	; 0x05
    239a:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    239c:	85 83       	std	Z+5, r24	; 0x05
    239e:	f8 01       	movw	r30, r16
    23a0:	85 81       	ldd	r24, Z+5	; 0x05
    23a2:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    23a4:	29 f0       	breq	.+10     	; 0x23b0 <usart_init_spi+0x354>
    23a6:	f7 01       	movw	r30, r14
    23a8:	85 81       	ldd	r24, Z+5	; 0x05
    23aa:	84 60       	ori	r24, 0x04	; 4
    23ac:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <usart_init_spi+0x35c>
    23b0:	f7 01       	movw	r30, r14
    23b2:	85 81       	ldd	r24, Z+5	; 0x05
    23b4:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    23b6:	85 83       	std	Z+5, r24	; 0x05
    23b8:	f8 01       	movw	r30, r16
    23ba:	40 81       	ld	r20, Z
    23bc:	51 81       	ldd	r21, Z+1	; 0x01
    23be:	62 81       	ldd	r22, Z+2	; 0x02
    23c0:	73 81       	ldd	r23, Z+3	; 0x03
    23c2:	00 e8       	ldi	r16, 0x80	; 128
    23c4:	14 e8       	ldi	r17, 0x84	; 132
    23c6:	2e e1       	ldi	r18, 0x1E	; 30
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	c7 01       	movw	r24, r14
    23cc:	16 de       	rcall	.-980    	; 0x1ffa <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    23ce:	f7 01       	movw	r30, r14
    23d0:	84 81       	ldd	r24, Z+4	; 0x04
    23d2:	88 60       	ori	r24, 0x08	; 8
    23d4:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    23d6:	84 81       	ldd	r24, Z+4	; 0x04
    23d8:	80 61       	ori	r24, 0x10	; 16
    23da:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    23dc:	1a c0       	rjmp	.+52     	; 0x2412 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    23de:	f7 01       	movw	r30, r14
    23e0:	84 81       	ldd	r24, Z+4	; 0x04
    23e2:	8f 7e       	andi	r24, 0xEF	; 239
    23e4:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    23e6:	f8 01       	movw	r30, r16
    23e8:	24 81       	ldd	r18, Z+4	; 0x04
    23ea:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    23ec:	c7 01       	movw	r24, r14
    23ee:	60 cf       	rjmp	.-320    	; 0x22b0 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    23f0:	0f 2e       	mov	r0, r31
    23f2:	f5 e1       	ldi	r31, 0x15	; 21
    23f4:	df 2e       	mov	r13, r31
    23f6:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    23f8:	80 ea       	ldi	r24, 0xA0	; 160
    23fa:	98 e0       	ldi	r25, 0x08	; 8
    23fc:	6a cf       	rjmp	.-300    	; 0x22d2 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    23fe:	0f 2e       	mov	r0, r31
    2400:	fd e1       	ldi	r31, 0x1D	; 29
    2402:	df 2e       	mov	r13, r31
    2404:	f0 2d       	mov	r31, r0
    2406:	7b cf       	rjmp	.-266    	; 0x22fe <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    2408:	0f 2e       	mov	r0, r31
    240a:	f5 e2       	ldi	r31, 0x25	; 37
    240c:	df 2e       	mov	r13, r31
    240e:	f0 2d       	mov	r31, r0
    2410:	8b cf       	rjmp	.-234    	; 0x2328 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    2412:	0f 90       	pop	r0
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	ff 90       	pop	r15
    241e:	ef 90       	pop	r14
    2420:	df 90       	pop	r13
    2422:	08 95       	ret

00002424 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    2424:	80 3a       	cpi	r24, 0xA0	; 160
    2426:	28 e0       	ldi	r18, 0x08	; 8
    2428:	92 07       	cpc	r25, r18
    242a:	21 f4       	brne	.+8      	; 0x2434 <usart_spi_init+0x10>
    242c:	60 e1       	ldi	r22, 0x10	; 16
    242e:	83 e0       	ldi	r24, 0x03	; 3
    2430:	21 c1       	rjmp	.+578    	; 0x2674 <sysclk_enable_module>
    2432:	08 95       	ret
    2434:	80 3b       	cpi	r24, 0xB0	; 176
    2436:	28 e0       	ldi	r18, 0x08	; 8
    2438:	92 07       	cpc	r25, r18
    243a:	21 f4       	brne	.+8      	; 0x2444 <usart_spi_init+0x20>
    243c:	60 e2       	ldi	r22, 0x20	; 32
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	19 c1       	rjmp	.+562    	; 0x2674 <sysclk_enable_module>
    2442:	08 95       	ret
    2444:	80 3a       	cpi	r24, 0xA0	; 160
    2446:	29 e0       	ldi	r18, 0x09	; 9
    2448:	92 07       	cpc	r25, r18
    244a:	21 f4       	brne	.+8      	; 0x2454 <usart_spi_init+0x30>
    244c:	60 e1       	ldi	r22, 0x10	; 16
    244e:	84 e0       	ldi	r24, 0x04	; 4
    2450:	11 c1       	rjmp	.+546    	; 0x2674 <sysclk_enable_module>
    2452:	08 95       	ret
    2454:	80 3b       	cpi	r24, 0xB0	; 176
    2456:	29 e0       	ldi	r18, 0x09	; 9
    2458:	92 07       	cpc	r25, r18
    245a:	21 f4       	brne	.+8      	; 0x2464 <usart_spi_init+0x40>
    245c:	60 e2       	ldi	r22, 0x20	; 32
    245e:	84 e0       	ldi	r24, 0x04	; 4
    2460:	09 c1       	rjmp	.+530    	; 0x2674 <sysclk_enable_module>
    2462:	08 95       	ret
    2464:	80 3a       	cpi	r24, 0xA0	; 160
    2466:	2a e0       	ldi	r18, 0x0A	; 10
    2468:	92 07       	cpc	r25, r18
    246a:	21 f4       	brne	.+8      	; 0x2474 <usart_spi_init+0x50>
    246c:	60 e1       	ldi	r22, 0x10	; 16
    246e:	85 e0       	ldi	r24, 0x05	; 5
    2470:	01 c1       	rjmp	.+514    	; 0x2674 <sysclk_enable_module>
    2472:	08 95       	ret
    2474:	80 3a       	cpi	r24, 0xA0	; 160
    2476:	9b 40       	sbci	r25, 0x0B	; 11
    2478:	19 f4       	brne	.+6      	; 0x2480 <usart_spi_init+0x5c>
    247a:	60 e1       	ldi	r22, 0x10	; 16
    247c:	86 e0       	ldi	r24, 0x06	; 6
    247e:	fa c0       	rjmp	.+500    	; 0x2674 <sysclk_enable_module>
    2480:	08 95       	ret

00002482 <usart_spi_setup_device>:
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	00 d0       	rcall	.+0      	; 0x248c <usart_spi_setup_device+0xa>
    248c:	00 d0       	rcall	.+0      	; 0x248e <usart_spi_setup_device+0xc>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	09 83       	std	Y+1, r16	; 0x01
    2494:	1a 83       	std	Y+2, r17	; 0x02
    2496:	2b 83       	std	Y+3, r18	; 0x03
    2498:	3c 83       	std	Y+4, r19	; 0x04
    249a:	4d 83       	std	Y+5, r20	; 0x05
    249c:	1e 82       	std	Y+6, r1	; 0x06
    249e:	be 01       	movw	r22, r28
    24a0:	6f 5f       	subi	r22, 0xFF	; 255
    24a2:	7f 4f       	sbci	r23, 0xFF	; 255
    24a4:	db dd       	rcall	.-1098   	; 0x205c <usart_init_spi>
    24a6:	26 96       	adiw	r28, 0x06	; 6
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	08 95       	ret

000024b6 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    24b6:	fb 01       	movw	r30, r22
    24b8:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    24ba:	e8 2f       	mov	r30, r24
    24bc:	e6 95       	lsr	r30
    24be:	e6 95       	lsr	r30
    24c0:	e6 95       	lsr	r30
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	e4 9f       	mul	r30, r20
    24c6:	f0 01       	movw	r30, r0
    24c8:	11 24       	eor	r1, r1
    24ca:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    24cc:	87 70       	andi	r24, 0x07	; 7
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	a9 01       	movw	r20, r18
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <usart_spi_select_device+0x24>
    24d6:	44 0f       	add	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	8a 95       	dec	r24
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    24de:	46 83       	std	Z+6, r20	; 0x06
    24e0:	08 95       	ret

000024e2 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    24e2:	fb 01       	movw	r30, r22
    24e4:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    24e6:	e8 2f       	mov	r30, r24
    24e8:	e6 95       	lsr	r30
    24ea:	e6 95       	lsr	r30
    24ec:	e6 95       	lsr	r30
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	e4 9f       	mul	r30, r20
    24f2:	f0 01       	movw	r30, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    24f8:	87 70       	andi	r24, 0x07	; 7
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	a9 01       	movw	r20, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <usart_spi_deselect_device+0x24>
    2502:	44 0f       	add	r20, r20
    2504:	55 1f       	adc	r21, r21
    2506:	8a 95       	dec	r24
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    250a:	45 83       	std	Z+5, r20	; 0x05
    250c:	08 95       	ret

0000250e <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    250e:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <fbpointer>
    2512:	90 93 79 22 	sts	0x2279, r25	; 0x802279 <fbpointer+0x1>
    2516:	08 95       	ret

00002518 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    2518:	20 91 78 22 	lds	r18, 0x2278	; 0x802278 <fbpointer>
    251c:	30 91 79 22 	lds	r19, 0x2279	; 0x802279 <fbpointer+0x1>
    2520:	90 e8       	ldi	r25, 0x80	; 128
    2522:	89 9f       	mul	r24, r25
    2524:	20 0d       	add	r18, r0
    2526:	31 1d       	adc	r19, r1
    2528:	11 24       	eor	r1, r1
    252a:	f9 01       	movw	r30, r18
    252c:	e6 0f       	add	r30, r22
    252e:	f1 1d       	adc	r31, r1
    2530:	40 83       	st	Z, r20
    2532:	08 95       	ret

00002534 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    2534:	20 91 78 22 	lds	r18, 0x2278	; 0x802278 <fbpointer>
    2538:	30 91 79 22 	lds	r19, 0x2279	; 0x802279 <fbpointer+0x1>
    253c:	90 e8       	ldi	r25, 0x80	; 128
    253e:	89 9f       	mul	r24, r25
    2540:	20 0d       	add	r18, r0
    2542:	31 1d       	adc	r19, r1
    2544:	11 24       	eor	r1, r1
    2546:	f9 01       	movw	r30, r18
    2548:	e6 0f       	add	r30, r22
    254a:	f1 1d       	adc	r31, r1
}
    254c:	80 81       	ld	r24, Z
    254e:	08 95       	ret

00002550 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	e4 2f       	mov	r30, r20
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	e8 0f       	add	r30, r24
    2560:	f1 1d       	adc	r31, r1
    2562:	e1 38       	cpi	r30, 0x81	; 129
    2564:	f1 05       	cpc	r31, r1
    2566:	1c f0       	brlt	.+6      	; 0x256e <gfx_mono_generic_draw_horizontal_line+0x1e>
    2568:	c0 e8       	ldi	r28, 0x80	; 128
    256a:	4c 2f       	mov	r20, r28
    256c:	48 1b       	sub	r20, r24
    256e:	44 23       	and	r20, r20
    2570:	09 f4       	brne	.+2      	; 0x2574 <gfx_mono_generic_draw_horizontal_line+0x24>
    2572:	50 c0       	rjmp	.+160    	; 0x2614 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2574:	d6 2f       	mov	r29, r22
    2576:	d6 95       	lsr	r29
    2578:	d6 95       	lsr	r29
    257a:	d6 95       	lsr	r29
    257c:	70 e0       	ldi	r23, 0x00	; 0
    257e:	98 e0       	ldi	r25, 0x08	; 8
    2580:	d9 9f       	mul	r29, r25
    2582:	60 19       	sub	r22, r0
    2584:	71 09       	sbc	r23, r1
    2586:	11 24       	eor	r1, r1
    2588:	e1 e0       	ldi	r30, 0x01	; 1
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	df 01       	movw	r26, r30
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <gfx_mono_generic_draw_horizontal_line+0x44>
    2590:	aa 0f       	add	r26, r26
    2592:	bb 1f       	adc	r27, r27
    2594:	6a 95       	dec	r22
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <gfx_mono_generic_draw_horizontal_line+0x40>
    2598:	fa 2e       	mov	r15, r26
    259a:	21 30       	cpi	r18, 0x01	; 1
    259c:	21 f0       	breq	.+8      	; 0x25a6 <gfx_mono_generic_draw_horizontal_line+0x56>
    259e:	a8 f0       	brcs	.+42     	; 0x25ca <gfx_mono_generic_draw_horizontal_line+0x7a>
    25a0:	22 30       	cpi	r18, 0x02	; 2
    25a2:	39 f1       	breq	.+78     	; 0x25f2 <gfx_mono_generic_draw_horizontal_line+0xa2>
    25a4:	37 c0       	rjmp	.+110    	; 0x2614 <gfx_mono_generic_draw_horizontal_line+0xc4>
    25a6:	c4 2f       	mov	r28, r20
    25a8:	1f ef       	ldi	r17, 0xFF	; 255
    25aa:	18 0f       	add	r17, r24
    25ac:	01 2f       	mov	r16, r17
    25ae:	0c 0f       	add	r16, r28
    25b0:	60 2f       	mov	r22, r16
    25b2:	8d 2f       	mov	r24, r29
    25b4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <gfx_mono_st7565r_get_byte>
    25b8:	4f 2d       	mov	r20, r15
    25ba:	48 2b       	or	r20, r24
    25bc:	60 2f       	mov	r22, r16
    25be:	8d 2f       	mov	r24, r29
    25c0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gfx_mono_st7565r_put_byte>
    25c4:	c1 50       	subi	r28, 0x01	; 1
    25c6:	91 f7       	brne	.-28     	; 0x25ac <gfx_mono_generic_draw_horizontal_line+0x5c>
    25c8:	25 c0       	rjmp	.+74     	; 0x2614 <gfx_mono_generic_draw_horizontal_line+0xc4>
    25ca:	c4 2f       	mov	r28, r20
    25cc:	1f ef       	ldi	r17, 0xFF	; 255
    25ce:	18 0f       	add	r17, r24
    25d0:	fa 2e       	mov	r15, r26
    25d2:	f0 94       	com	r15
    25d4:	01 2f       	mov	r16, r17
    25d6:	0c 0f       	add	r16, r28
    25d8:	60 2f       	mov	r22, r16
    25da:	8d 2f       	mov	r24, r29
    25dc:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <gfx_mono_st7565r_get_byte>
    25e0:	4f 2d       	mov	r20, r15
    25e2:	48 23       	and	r20, r24
    25e4:	60 2f       	mov	r22, r16
    25e6:	8d 2f       	mov	r24, r29
    25e8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gfx_mono_st7565r_put_byte>
    25ec:	c1 50       	subi	r28, 0x01	; 1
    25ee:	91 f7       	brne	.-28     	; 0x25d4 <gfx_mono_generic_draw_horizontal_line+0x84>
    25f0:	11 c0       	rjmp	.+34     	; 0x2614 <gfx_mono_generic_draw_horizontal_line+0xc4>
    25f2:	c4 2f       	mov	r28, r20
    25f4:	1f ef       	ldi	r17, 0xFF	; 255
    25f6:	18 0f       	add	r17, r24
    25f8:	01 2f       	mov	r16, r17
    25fa:	0c 0f       	add	r16, r28
    25fc:	60 2f       	mov	r22, r16
    25fe:	8d 2f       	mov	r24, r29
    2600:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <gfx_mono_st7565r_get_byte>
    2604:	4f 2d       	mov	r20, r15
    2606:	48 27       	eor	r20, r24
    2608:	60 2f       	mov	r22, r16
    260a:	8d 2f       	mov	r24, r29
    260c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gfx_mono_st7565r_put_byte>
    2610:	c1 50       	subi	r28, 0x01	; 1
    2612:	91 f7       	brne	.-28     	; 0x25f8 <gfx_mono_generic_draw_horizontal_line+0xa8>
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	08 95       	ret

00002620 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
	if (height == 0) {
    262a:	22 23       	and	r18, r18
    262c:	69 f0       	breq	.+26     	; 0x2648 <gfx_mono_generic_draw_filled_rect+0x28>
    262e:	f4 2e       	mov	r15, r20
    2630:	18 2f       	mov	r17, r24
    2632:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    2634:	df ef       	ldi	r29, 0xFF	; 255
    2636:	d6 0f       	add	r29, r22
    2638:	6d 2f       	mov	r22, r29
    263a:	6c 0f       	add	r22, r28
    263c:	20 2f       	mov	r18, r16
    263e:	4f 2d       	mov	r20, r15
    2640:	81 2f       	mov	r24, r17
    2642:	86 df       	rcall	.-244    	; 0x2550 <gfx_mono_generic_draw_horizontal_line>
    2644:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    2646:	c1 f7       	brne	.-16     	; 0x2638 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	08 95       	ret

00002654 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    265a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    265e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2662:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2666:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    266a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    266e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    2672:	08 95       	ret

00002674 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	1f 92       	push	r1
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    267e:	9f b7       	in	r25, 0x3f	; 63
    2680:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2682:	f8 94       	cli
	return flags;
    2684:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2686:	e8 2f       	mov	r30, r24
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	e0 59       	subi	r30, 0x90	; 144
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	60 95       	com	r22
    2690:	80 81       	ld	r24, Z
    2692:	68 23       	and	r22, r24
    2694:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2696:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2698:	0f 90       	pop	r0
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	08 95       	ret

000026a0 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	1f 92       	push	r1
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    26aa:	9f b7       	in	r25, 0x3f	; 63
    26ac:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    26ae:	f8 94       	cli
	return flags;
    26b0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    26b2:	e8 2f       	mov	r30, r24
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	e0 59       	subi	r30, 0x90	; 144
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	68 2b       	or	r22, r24
    26be:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    26c0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    26c2:	0f 90       	pop	r0
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	08 95       	ret

000026ca <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    26ca:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    26ce:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    26d0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    26d2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    26d6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    26d8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    26dc:	08 95       	ret

000026de <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	c8 2f       	mov	r28, r24
    26f4:	e6 2e       	mov	r14, r22
    26f6:	b4 2e       	mov	r11, r20
    26f8:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    26fa:	00 e0       	ldi	r16, 0x00	; 0
    26fc:	f9 01       	movw	r30, r18
    26fe:	24 81       	ldd	r18, Z+4	; 0x04
    2700:	43 81       	ldd	r20, Z+3	; 0x03
    2702:	6b 2d       	mov	r22, r11
    2704:	8e 2d       	mov	r24, r14
    2706:	8c df       	rcall	.-232    	; 0x2620 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    2708:	f6 01       	movw	r30, r12
    270a:	80 81       	ld	r24, Z
    270c:	81 11       	cpse	r24, r1
    270e:	3a c0       	rjmp	.+116    	; 0x2784 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    2710:	83 81       	ldd	r24, Z+3	; 0x03
    2712:	28 2f       	mov	r18, r24
    2714:	26 95       	lsr	r18
    2716:	26 95       	lsr	r18
    2718:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    271a:	87 70       	andi	r24, 0x07	; 7
    271c:	09 f0       	breq	.+2      	; 0x2720 <gfx_mono_draw_char+0x42>
		char_row_size++;
    271e:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    2720:	f6 01       	movw	r30, r12
    2722:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    2724:	8c 2f       	mov	r24, r28
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	35 81       	ldd	r19, Z+5	; 0x05
    272a:	83 1b       	sub	r24, r19
    272c:	91 09       	sbc	r25, r1
    272e:	2a 9d       	mul	r18, r10
    2730:	90 01       	movw	r18, r0
    2732:	11 24       	eor	r1, r1
    2734:	82 9f       	mul	r24, r18
    2736:	a0 01       	movw	r20, r0
    2738:	83 9f       	mul	r24, r19
    273a:	50 0d       	add	r21, r0
    273c:	92 9f       	mul	r25, r18
    273e:	50 0d       	add	r21, r0
    2740:	11 24       	eor	r1, r1
    2742:	01 81       	ldd	r16, Z+1	; 0x01
    2744:	12 81       	ldd	r17, Z+2	; 0x02
    2746:	04 0f       	add	r16, r20
    2748:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    274a:	f6 01       	movw	r30, r12
    274c:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    274e:	ff 20       	and	r15, r15
    2750:	a9 f0       	breq	.+42     	; 0x277c <gfx_mono_draw_char+0x9e>
    2752:	d0 e0       	ldi	r29, 0x00	; 0
    2754:	c0 e0       	ldi	r28, 0x00	; 0
    2756:	8e 2d       	mov	r24, r14
    2758:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    275a:	9c 2f       	mov	r25, r28
    275c:	97 70       	andi	r25, 0x07	; 7
    275e:	21 f4       	brne	.+8      	; 0x2768 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    2760:	f8 01       	movw	r30, r16
    2762:	d4 91       	lpm	r29, Z
				glyph_data++;
    2764:	0f 5f       	subi	r16, 0xFF	; 255
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    2768:	dd 23       	and	r29, r29
    276a:	24 f4       	brge	.+8      	; 0x2774 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	6b 2d       	mov	r22, r11
    2770:	0e 94 45 05 	call	0xa8a	; 0xa8a <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2774:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2776:	cf 5f       	subi	r28, 0xFF	; 255
    2778:	fc 12       	cpse	r15, r28
    277a:	ed cf       	rjmp	.-38     	; 0x2756 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    277c:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    277e:	aa 94       	dec	r10
	} while (rows_left > 0);
    2780:	a1 10       	cpse	r10, r1
    2782:	e3 cf       	rjmp	.-58     	; 0x274a <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	ef 90       	pop	r14
    2790:	df 90       	pop	r13
    2792:	cf 90       	pop	r12
    2794:	bf 90       	pop	r11
    2796:	af 90       	pop	r10
    2798:	08 95       	ret

0000279a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    279a:	df 92       	push	r13
    279c:	ef 92       	push	r14
    279e:	ff 92       	push	r15
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	d6 2e       	mov	r13, r22
    27aa:	04 2f       	mov	r16, r20
    27ac:	79 01       	movw	r14, r18
    27ae:	ec 01       	movw	r28, r24
    27b0:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    27b2:	89 91       	ld	r24, Y+
    27b4:	8a 30       	cpi	r24, 0x0A	; 10
    27b6:	31 f4       	brne	.+12     	; 0x27c4 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    27b8:	f7 01       	movw	r30, r14
    27ba:	84 81       	ldd	r24, Z+4	; 0x04
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    27c0:	1d 2d       	mov	r17, r13
    27c2:	09 c0       	rjmp	.+18     	; 0x27d6 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    27c4:	8d 30       	cpi	r24, 0x0D	; 13
    27c6:	39 f0       	breq	.+14     	; 0x27d6 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    27c8:	97 01       	movw	r18, r14
    27ca:	40 2f       	mov	r20, r16
    27cc:	61 2f       	mov	r22, r17
    27ce:	87 df       	rcall	.-242    	; 0x26de <gfx_mono_draw_char>
			x += font->width;
    27d0:	f7 01       	movw	r30, r14
    27d2:	83 81       	ldd	r24, Z+3	; 0x03
    27d4:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    27d6:	88 81       	ld	r24, Y
    27d8:	81 11       	cpse	r24, r1
    27da:	eb cf       	rjmp	.-42     	; 0x27b2 <gfx_mono_draw_string+0x18>
}
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0f 91       	pop	r16
    27e4:	ff 90       	pop	r15
    27e6:	ef 90       	pop	r14
    27e8:	df 90       	pop	r13
    27ea:	08 95       	ret

000027ec <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    27f6:	c6 2f       	mov	r28, r22
    27f8:	d0 e0       	ldi	r29, 0x00	; 0
    27fa:	de 01       	movw	r26, r28
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <ioport_configure_port_pin+0x18>
    2800:	b5 95       	asr	r27
    2802:	a7 95       	ror	r26
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <ioport_configure_port_pin+0x14>
    2808:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    280a:	50 8b       	std	Z+16, r21	; 0x10
    280c:	2f 5f       	subi	r18, 0xFF	; 255
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2812:	28 30       	cpi	r18, 0x08	; 8
    2814:	31 05       	cpc	r19, r1
    2816:	89 f7       	brne	.-30     	; 0x27fa <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2818:	40 ff       	sbrs	r20, 0
    281a:	0a c0       	rjmp	.+20     	; 0x2830 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    281c:	41 ff       	sbrs	r20, 1
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2820:	fc 01       	movw	r30, r24
    2822:	65 83       	std	Z+5, r22	; 0x05
    2824:	02 c0       	rjmp	.+4      	; 0x282a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2826:	fc 01       	movw	r30, r24
    2828:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    282a:	fc 01       	movw	r30, r24
    282c:	61 83       	std	Z+1, r22	; 0x01
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2830:	fc 01       	movw	r30, r24
    2832:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    283a:	43 e0       	ldi	r20, 0x03	; 3
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	80 ee       	ldi	r24, 0xE0	; 224
    2842:	97 e0       	ldi	r25, 0x07	; 7
    2844:	d3 df       	rcall	.-90     	; 0x27ec <ioport_configure_port_pin>
    2846:	43 e0       	ldi	r20, 0x03	; 3
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	62 e0       	ldi	r22, 0x02	; 2
    284c:	80 ee       	ldi	r24, 0xE0	; 224
    284e:	97 e0       	ldi	r25, 0x07	; 7
    2850:	cd df       	rcall	.-102    	; 0x27ec <ioport_configure_port_pin>
    2852:	43 e0       	ldi	r20, 0x03	; 3
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	60 e1       	ldi	r22, 0x10	; 16
    2858:	80 e6       	ldi	r24, 0x60	; 96
    285a:	96 e0       	ldi	r25, 0x06	; 6
    285c:	c7 df       	rcall	.-114    	; 0x27ec <ioport_configure_port_pin>
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	50 e4       	ldi	r21, 0x40	; 64
    2862:	60 e2       	ldi	r22, 0x20	; 32
    2864:	80 e6       	ldi	r24, 0x60	; 96
    2866:	96 e0       	ldi	r25, 0x06	; 6
    2868:	c1 df       	rcall	.-126    	; 0x27ec <ioport_configure_port_pin>
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	5b e1       	ldi	r21, 0x1B	; 27
    286e:	60 e2       	ldi	r22, 0x20	; 32
    2870:	80 e8       	ldi	r24, 0x80	; 128
    2872:	96 e0       	ldi	r25, 0x06	; 6
    2874:	bb df       	rcall	.-138    	; 0x27ec <ioport_configure_port_pin>
    2876:	40 e0       	ldi	r20, 0x00	; 0
    2878:	5b e1       	ldi	r21, 0x1B	; 27
    287a:	62 e0       	ldi	r22, 0x02	; 2
    287c:	80 ea       	ldi	r24, 0xA0	; 160
    287e:	96 e0       	ldi	r25, 0x06	; 6
    2880:	b5 df       	rcall	.-150    	; 0x27ec <ioport_configure_port_pin>
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	5b e1       	ldi	r21, 0x1B	; 27
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	80 ea       	ldi	r24, 0xA0	; 160
    288a:	96 e0       	ldi	r25, 0x06	; 6
    288c:	af df       	rcall	.-162    	; 0x27ec <ioport_configure_port_pin>
    288e:	43 e0       	ldi	r20, 0x03	; 3
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	62 e0       	ldi	r22, 0x02	; 2
    2894:	80 e6       	ldi	r24, 0x60	; 96
    2896:	96 e0       	ldi	r25, 0x06	; 6
    2898:	a9 df       	rcall	.-174    	; 0x27ec <ioport_configure_port_pin>
    289a:	43 e0       	ldi	r20, 0x03	; 3
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	68 e0       	ldi	r22, 0x08	; 8
    28a0:	80 e6       	ldi	r24, 0x60	; 96
    28a2:	96 e0       	ldi	r25, 0x06	; 6
    28a4:	a3 df       	rcall	.-186    	; 0x27ec <ioport_configure_port_pin>
    28a6:	43 e0       	ldi	r20, 0x03	; 3
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	68 e0       	ldi	r22, 0x08	; 8
    28ac:	80 ea       	ldi	r24, 0xA0	; 160
    28ae:	96 e0       	ldi	r25, 0x06	; 6
    28b0:	9d df       	rcall	.-198    	; 0x27ec <ioport_configure_port_pin>
    28b2:	43 e0       	ldi	r20, 0x03	; 3
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	61 e0       	ldi	r22, 0x01	; 1
    28b8:	80 e6       	ldi	r24, 0x60	; 96
    28ba:	96 e0       	ldi	r25, 0x06	; 6
    28bc:	97 df       	rcall	.-210    	; 0x27ec <ioport_configure_port_pin>
    28be:	43 e0       	ldi	r20, 0x03	; 3
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	68 e0       	ldi	r22, 0x08	; 8
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	96 e0       	ldi	r25, 0x06	; 6
    28c8:	91 df       	rcall	.-222    	; 0x27ec <ioport_configure_port_pin>
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	60 e1       	ldi	r22, 0x10	; 16
    28d0:	80 e8       	ldi	r24, 0x80	; 128
    28d2:	96 e0       	ldi	r25, 0x06	; 6
    28d4:	8b df       	rcall	.-234    	; 0x27ec <ioport_configure_port_pin>
    28d6:	43 e0       	ldi	r20, 0x03	; 3
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	62 e0       	ldi	r22, 0x02	; 2
    28dc:	80 e6       	ldi	r24, 0x60	; 96
    28de:	96 e0       	ldi	r25, 0x06	; 6
    28e0:	85 df       	rcall	.-246    	; 0x27ec <ioport_configure_port_pin>
    28e2:	43 e0       	ldi	r20, 0x03	; 3
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	68 e0       	ldi	r22, 0x08	; 8
    28e8:	80 e6       	ldi	r24, 0x60	; 96
    28ea:	96 e0       	ldi	r25, 0x06	; 6
    28ec:	7f df       	rcall	.-258    	; 0x27ec <ioport_configure_port_pin>
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	64 e0       	ldi	r22, 0x04	; 4
    28f4:	80 e6       	ldi	r24, 0x60	; 96
    28f6:	96 e0       	ldi	r25, 0x06	; 6
    28f8:	79 df       	rcall	.-270    	; 0x27ec <ioport_configure_port_pin>
    28fa:	43 e0       	ldi	r20, 0x03	; 3
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	60 e1       	ldi	r22, 0x10	; 16
    2900:	80 ea       	ldi	r24, 0xA0	; 160
    2902:	96 e0       	ldi	r25, 0x06	; 6
    2904:	73 df       	rcall	.-282    	; 0x27ec <ioport_configure_port_pin>
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	61 e0       	ldi	r22, 0x01	; 1
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	96 e0       	ldi	r25, 0x06	; 6
    2910:	6d df       	rcall	.-294    	; 0x27ec <ioport_configure_port_pin>
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	64 e0       	ldi	r22, 0x04	; 4
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	96 e0       	ldi	r25, 0x06	; 6
    291c:	67 df       	rcall	.-306    	; 0x27ec <ioport_configure_port_pin>
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	80 e2       	ldi	r24, 0x20	; 32
    2926:	96 e0       	ldi	r25, 0x06	; 6
    2928:	61 df       	rcall	.-318    	; 0x27ec <ioport_configure_port_pin>
    292a:	43 e0       	ldi	r20, 0x03	; 3
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	68 e0       	ldi	r22, 0x08	; 8
    2930:	80 e4       	ldi	r24, 0x40	; 64
    2932:	96 e0       	ldi	r25, 0x06	; 6
    2934:	5b df       	rcall	.-330    	; 0x27ec <ioport_configure_port_pin>
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	64 e0       	ldi	r22, 0x04	; 4
    293c:	80 e4       	ldi	r24, 0x40	; 64
    293e:	96 e0       	ldi	r25, 0x06	; 6
    2940:	55 df       	rcall	.-342    	; 0x27ec <ioport_configure_port_pin>
    2942:	43 e0       	ldi	r20, 0x03	; 3
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	68 e0       	ldi	r22, 0x08	; 8
    2948:	80 e6       	ldi	r24, 0x60	; 96
    294a:	96 e0       	ldi	r25, 0x06	; 6
    294c:	4f df       	rcall	.-354    	; 0x27ec <ioport_configure_port_pin>
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	64 e0       	ldi	r22, 0x04	; 4
    2954:	80 e6       	ldi	r24, 0x60	; 96
    2956:	96 e0       	ldi	r25, 0x06	; 6
    2958:	49 df       	rcall	.-366    	; 0x27ec <ioport_configure_port_pin>
    295a:	43 e0       	ldi	r20, 0x03	; 3
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	68 e0       	ldi	r22, 0x08	; 8
    2960:	80 e8       	ldi	r24, 0x80	; 128
    2962:	96 e0       	ldi	r25, 0x06	; 6
    2964:	43 df       	rcall	.-378    	; 0x27ec <ioport_configure_port_pin>
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	64 e0       	ldi	r22, 0x04	; 4
    296c:	80 e8       	ldi	r24, 0x80	; 128
    296e:	96 e0       	ldi	r25, 0x06	; 6
    2970:	3d cf       	rjmp	.-390    	; 0x27ec <ioport_configure_port_pin>
    2972:	08 95       	ret

00002974 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2974:	04 c0       	rjmp	.+8      	; 0x297e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2976:	61 50       	subi	r22, 0x01	; 1
    2978:	71 09       	sbc	r23, r1
    297a:	81 09       	sbc	r24, r1
    297c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    297e:	61 15       	cp	r22, r1
    2980:	71 05       	cpc	r23, r1
    2982:	81 05       	cpc	r24, r1
    2984:	91 05       	cpc	r25, r1
    2986:	b9 f7       	brne	.-18     	; 0x2976 <__portable_avr_delay_cycles+0x2>
    2988:	08 95       	ret

0000298a <print_message>:
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);
}

//Fungsi ini bukan utk print message, tapi increment nilai variabel "increment" setiap 29us
void print_message(void){
	incremental = incremental + 1;
    298a:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <incremental>
    298e:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <incremental+0x1>
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	80 93 42 23 	sts	0x2342, r24	; 0x802342 <incremental>
    2998:	90 93 43 23 	sts	0x2343, r25	; 0x802343 <incremental+0x1>
    299c:	08 95       	ret

0000299e <setup_timer>:
	return result;
}

//Fungsi setup timer
void setup_timer(void){
	tc_enable(&TCC0);
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	98 e0       	ldi	r25, 0x08	; 8
    29a2:	7c da       	rcall	.-2824   	; 0x1e9c <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0,print_message);
    29a4:	65 ec       	ldi	r22, 0xC5	; 197
    29a6:	74 e1       	ldi	r23, 0x14	; 20
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	98 e0       	ldi	r25, 0x08	; 8
    29ac:	e8 da       	rcall	.-2608   	; 0x1f7e <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    29ae:	e0 e0       	ldi	r30, 0x00	; 0
    29b0:	f8 e0       	ldi	r31, 0x08	; 8
    29b2:	81 81       	ldd	r24, Z+1	; 0x01
    29b4:	88 7f       	andi	r24, 0xF8	; 248
    29b6:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    29b8:	87 e0       	ldi	r24, 0x07	; 7
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	86 a3       	std	Z+38, r24	; 0x26
    29be:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    29c0:	86 81       	ldd	r24, Z+6	; 0x06
    29c2:	8c 7f       	andi	r24, 0xFC	; 252
    29c4:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    29c6:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    29c8:	83 60       	ori	r24, 0x03	; 3
    29ca:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    29cc:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    29ce:	80 7f       	andi	r24, 0xF0	; 240
    29d0:	81 60       	ori	r24, 0x01	; 1
    29d2:	80 83       	st	Z, r24
    29d4:	08 95       	ret

000029d6 <print_lcd>:
//Fungsi ini bukan utk print message, tapi increment nilai variabel "increment" setiap 29us
void print_message(void){
	incremental = incremental + 1;
}

void print_lcd(uint16_t piezo, int ultra) {
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	06 2f       	mov	r16, r22
    29e2:	f7 2e       	mov	r15, r23
	snprintf(buffarray, sizeof(buffarray), "Berat Truk : %6d", piezo);
    29e4:	9f 93       	push	r25
    29e6:	8f 93       	push	r24
    29e8:	87 e0       	ldi	r24, 0x07	; 7
    29ea:	90 e2       	ldi	r25, 0x20	; 32
    29ec:	9f 93       	push	r25
    29ee:	8f 93       	push	r24
    29f0:	1f 92       	push	r1
    29f2:	18 ec       	ldi	r17, 0xC8	; 200
    29f4:	1f 93       	push	r17
    29f6:	ca e7       	ldi	r28, 0x7A	; 122
    29f8:	d2 e2       	ldi	r29, 0x22	; 34
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	34 d1       	rcall	.+616    	; 0x2c68 <snprintf>
	gfx_mono_draw_string(buffarray,0, 0, &sysfont);
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e2       	ldi	r19, 0x20	; 32
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	ce 01       	movw	r24, r28
    2a0a:	c7 de       	rcall	.-626    	; 0x279a <gfx_mono_draw_string>
	snprintf(buffarray, sizeof(buffarray), "Tinggi Truk : %d cm  ", ultra);
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	88 e1       	ldi	r24, 0x18	; 24
    2a12:	90 e2       	ldi	r25, 0x20	; 32
    2a14:	9f 93       	push	r25
    2a16:	8f 93       	push	r24
    2a18:	1f 92       	push	r1
    2a1a:	1f 93       	push	r17
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	23 d1       	rcall	.+582    	; 0x2c68 <snprintf>
	gfx_mono_draw_string(buffarray, 0, 8, &sysfont);
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e2       	ldi	r19, 0x20	; 32
    2a26:	48 e0       	ldi	r20, 0x08	; 8
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	b6 de       	rcall	.-660    	; 0x279a <gfx_mono_draw_string>
}
    2a2e:	8d b7       	in	r24, 0x3d	; 61
    2a30:	9e b7       	in	r25, 0x3e	; 62
    2a32:	40 96       	adiw	r24, 0x10	; 16
    2a34:	8d bf       	out	0x3d, r24	; 61
    2a36:	9e bf       	out	0x3e, r25	; 62
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	08 95       	ret

00002a44 <checkLight>:

void checkLight(uint16_t piezoRead, int ultraRead) {
	if(ultraRead <= 10 && piezoRead <= 250) {
    2a44:	6b 30       	cpi	r22, 0x0B	; 11
    2a46:	71 05       	cpc	r23, r1
    2a48:	4c f4       	brge	.+18     	; 0x2a5c <checkLight+0x18>
    2a4a:	8b 3f       	cpi	r24, 0xFB	; 251
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	08 f5       	brcc	.+66     	; 0x2a92 <checkLight+0x4e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    2a56:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    2a5a:	08 95       	ret
		ioport_set_pin_low(LED_IN);
		ioport_set_pin_low(BUZZ_IN);
	} else if (ultraRead > 10 && piezoRead < 250) {
    2a5c:	8a 3f       	cpi	r24, 0xFA	; 250
    2a5e:	91 05       	cpc	r25, r1
    2a60:	30 f4       	brcc	.+12     	; 0x2a6e <checkLight+0x2a>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2a68:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    2a6c:	08 95       	ret
		ioport_set_pin_high(LED_IN);
		ioport_set_pin_low(BUZZ_IN);
	} else if (ultraRead < 10 && piezoRead > 250) {
    2a6e:	6a 30       	cpi	r22, 0x0A	; 10
    2a70:	71 05       	cpc	r23, r1
    2a72:	4c f4       	brge	.+18     	; 0x2a86 <checkLight+0x42>
    2a74:	8b 3f       	cpi	r24, 0xFB	; 251
    2a76:	91 05       	cpc	r25, r1
    2a78:	30 f0       	brcs	.+12     	; 0x2a86 <checkLight+0x42>
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a80:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2a84:	08 95       	ret
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    2a8c:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
		ioport_set_pin_high(BUZZ_IN);
	} else {
		ioport_set_pin_high(LED_IN);
		ioport_set_pin_high(BUZZ_IN);
	}
}
    2a90:	08 95       	ret
		ioport_set_pin_low(LED_IN);
		ioport_set_pin_low(BUZZ_IN);
	} else if (ultraRead > 10 && piezoRead < 250) {
		ioport_set_pin_high(LED_IN);
		ioport_set_pin_low(BUZZ_IN);
	} else if (ultraRead < 10 && piezoRead > 250) {
    2a92:	6a 30       	cpi	r22, 0x0A	; 10
    2a94:	71 05       	cpc	r23, r1
    2a96:	bc f7       	brge	.-18     	; 0x2a86 <checkLight+0x42>
    2a98:	f0 cf       	rjmp	.-32     	; 0x2a7a <checkLight+0x36>

00002a9a <main>:
		ioport_set_pin_high(BUZZ_IN);
	}
}

int main (void)
{
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	2b 97       	sbiw	r28, 0x0b	; 11
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	de bf       	out	0x3e, r29	; 62
	// Insert system clock initialization code here (sysclk_init()).
	board_init();
    2aa8:	c8 de       	rcall	.-624    	; 0x283a <board_init>
	sysclk_init();
    2aaa:	d4 dd       	rcall	.-1112   	; 0x2654 <sysclk_init>
    2aac:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2aae:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2ab2:	0e 94 00 05 	call	0xa00	; 0xa00 <gfx_mono_st7565r_init>
	pmic_init();
	gfx_mono_init();
    2ab6:	be 01       	movw	r22, r28
static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	
	adc_read_configuration(&MY_ADC, &adc_conf);
    2ab8:	6f 5f       	subi	r22, 0xFF	; 255
    2aba:	7f 4f       	sbci	r23, 0xFF	; 255
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	92 e0       	ldi	r25, 0x02	; 2
    2ac0:	0e 94 e5 07 	call	0xfca	; 0xfca <adc_read_configuration>
    2ac4:	ae 01       	movw	r20, r28
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    2ac6:	48 5f       	subi	r20, 0xF8	; 248
    2ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	92 e0       	ldi	r25, 0x02	; 2
    2ad0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <adcch_read_configuration>
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2ad6:	9b 81       	ldd	r25, Y+3	; 0x03
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    2ad8:	9f 78       	andi	r25, 0x8F	; 143
    2ada:	90 64       	ori	r25, 0x40	; 64
    2adc:	9b 83       	std	Y+3, r25	; 0x03
    2ade:	81 7e       	andi	r24, 0xE1	; 225
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    2ae0:	84 60       	ori	r24, 0x04	; 4
    2ae2:	8a 83       	std	Y+2, r24	; 0x02
    2ae4:	1c 82       	std	Y+4, r1	; 0x04
		conf->evctrl = ADC_EVACT_NONE_gc;
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	be 01       	movw	r22, r28

	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_8, ADC_REF_VCCDIV2);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_write_configuration(&MY_ADC, &adc_conf);
    2aec:	6f 5f       	subi	r22, 0xFF	; 255
    2aee:	7f 4f       	sbci	r23, 0xFF	; 255
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	0e 94 7b 07 	call	0xef6	; 0xef6 <adc_write_configuration>
    2af8:	81 e0       	ldi	r24, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2afa:	88 87       	std	Y+8, r24	; 0x08
    2afc:	80 e5       	ldi	r24, 0x50	; 80
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2afe:	89 87       	std	Y+9, r24	; 0x09
    2b00:	ae 01       	movw	r20, r28
	
	//adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	//adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
	
	adcch_set_input(&adcch_conf, J2_PIN2, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&MY_ADC, PIEZO_ADC_CH, &adcch_conf);
    2b02:	48 5f       	subi	r20, 0xF8	; 248
    2b04:	5f 4f       	sbci	r21, 0xFF	; 255
    2b06:	64 e0       	ldi	r22, 0x04	; 4
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	92 e0       	ldi	r25, 0x02	; 2
    2b0c:	0e 94 1e 08 	call	0x103c	; 0x103c <adcch_write_configuration>
    2b10:	e0 e4       	ldi	r30, 0x40	; 64
	pmic_init();
	gfx_mono_init();
	
	adc_init();
	
	PORTC.DIR |= PIN0_bm;
    2b12:	f6 e0       	ldi	r31, 0x06	; 6
    2b14:	80 81       	ld	r24, Z
    2b16:	81 60       	ori	r24, 0x01	; 1
    2b18:	80 83       	st	Z, r24
    2b1a:	e0 e8       	ldi	r30, 0x80	; 128
	PORTE.DIR |= PIN0_bm;
    2b1c:	f6 e0       	ldi	r31, 0x06	; 6
    2b1e:	80 81       	ld	r24, Z
    2b20:	81 60       	ori	r24, 0x01	; 1
    2b22:	80 83       	st	Z, r24
    2b24:	80 e1       	ldi	r24, 0x10	; 16
    2b26:	85 83       	std	Z+5, r24	; 0x05
    2b28:	64 e0       	ldi	r22, 0x04	; 4
	uint16_t result;
	
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);

	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	a3 dd       	rcall	.-1210   	; 0x2674 <sysclk_enable_module>
    2b2e:	e0 e2       	ldi	r30, 0x20	; 32
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    2b30:	f4 e0       	ldi	r31, 0x04	; 4
    2b32:	81 81       	ldd	r24, Z+1	; 0x01
    2b34:	80 fd       	sbrc	r24, 0
    2b36:	fd cf       	rjmp	.-6      	; 0x2b32 <main+0x98>
    2b38:	66 e1       	ldi	r22, 0x16	; 22
		// Wait for RTC32 sysclk to become stable
	}
	
	delay_ms(1000);
    2b3a:	76 e1       	ldi	r23, 0x16	; 22
    2b3c:	85 e0       	ldi	r24, 0x05	; 5
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	19 df       	rcall	.-462    	; 0x2974 <__portable_avr_delay_cycles>
	setup_timer();
    2b42:	2d df       	rcall	.-422    	; 0x299e <setup_timer>
    2b44:	00 e2       	ldi	r16, 0x20	; 32
	
	// Insert application code here, after the board has been initialized.
	while(1){
		
		PORTB.DIR = 0b11111111; //Set output
    2b46:	16 e0       	ldi	r17, 0x06	; 6
    2b48:	55 24       	eor	r5, r5
    2b4a:	5a 94       	dec	r5
    2b4c:	e1 2c       	mov	r14, r1
}
*/

static uint16_t piezo_read(){
	uint16_t result;
	adc_enable(&MY_ADC);
    2b4e:	68 94       	set
    2b50:	ff 24       	eor	r15, r15
    2b52:	f1 f8       	bld	r15, 1
    2b54:	68 94       	set
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    2b56:	44 24       	eor	r4, r4
    2b58:	42 f8       	bld	r4, 2
    2b5a:	0f 2e       	mov	r0, r31
	adc_start_conversion(&MY_ADC, PIEZO_ADC_CH);
	adc_wait_for_interrupt_flag(&MY_ADC, PIEZO_ADC_CH);
	delay_ms(1);
	result = adc_get_result(&MY_ADC, PIEZO_ADC_CH);
    2b5c:	f0 e3       	ldi	r31, 0x30	; 48
    2b5e:	6f 2e       	mov	r6, r31
    2b60:	f2 e0       	ldi	r31, 0x02	; 2
    2b62:	7f 2e       	mov	r7, r31
    2b64:	f0 2d       	mov	r31, r0
    2b66:	0f 2e       	mov	r0, r31
		
		int inc = newinc - oldinc;
		int newscore = inc/2; //Dibagi 2 seperti rumus sonar
		
		result = piezo_read();
		int ultra_read = 17 - newscore;
    2b68:	f1 e1       	ldi	r31, 0x11	; 17
    2b6a:	8f 2e       	mov	r8, r31
    2b6c:	91 2c       	mov	r9, r1
    2b6e:	f0 2d       	mov	r31, r0
    2b70:	f8 01       	movw	r30, r16
	setup_timer();
	
	// Insert application code here, after the board has been initialized.
	while(1){
		
		PORTB.DIR = 0b11111111; //Set output
    2b72:	50 82       	st	Z, r5
    2b74:	14 82       	std	Z+4, r1	; 0x04
		PORTB.OUT = 0b00000000; //Set low
    2b76:	54 82       	std	Z+4, r5	; 0x04
		PORTB.OUT = 0b11111111; //Set high selama 5us
		delay_us(5);
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	f9 de       	rcall	.-526    	; 0x2974 <__portable_avr_delay_cycles>
    2b82:	f8 01       	movw	r30, r16
		PORTB.OUT = 0b00000000; //Kembali menjadi low
    2b84:	14 82       	std	Z+4, r1	; 0x04
		PORTB.DIR = 0b00000000; //Set menjadi input
    2b86:	10 82       	st	Z, r1
		delay_us(750); //Delay holdoff selama 750us
    2b88:	6b ef       	ldi	r22, 0xFB	; 251
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	f1 de       	rcall	.-542    	; 0x2974 <__portable_avr_delay_cycles>
    2b92:	c0 90 42 23 	lds	r12, 0x2342	; 0x802342 <incremental>
		
		int oldinc = incremental;
    2b96:	d0 90 43 23 	lds	r13, 0x2343	; 0x802343 <incremental+0x1>
		delay_us(115); //Delay lagi, kali ini seharusnya pin menjadi high
    2b9a:	67 e2       	ldi	r22, 0x27	; 39
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	e8 de       	rcall	.-560    	; 0x2974 <__portable_avr_delay_cycles>
    2ba4:	78 94       	sei
		
		cpu_irq_enable(); //Mulai interrupt
    2ba6:	f8 01       	movw	r30, r16
		while(PORTB.IN & PIN0_bm){
    2ba8:	80 85       	ldd	r24, Z+8	; 0x08
    2baa:	80 fd       	sbrc	r24, 0
    2bac:	fc cf       	rjmp	.-8      	; 0x2ba6 <main+0x10c>
    2bae:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <incremental>
			//Tidak ada apa-apa di sini. Loop ini berfungsi untuk mendeteksi pin 0 PORT B yang berubah menjadi low
		}
		int newinc = incremental; //Catat selisih waktu antara suara dikirim hingga diterima
    2bb2:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <incremental+0x1>
    2bb6:	f8 94       	cli
		cpu_irq_disable(); //Interrupt dimatikan
    2bb8:	8c 19       	sub	r24, r12
		
		int inc = newinc - oldinc;
		int newscore = inc/2; //Dibagi 2 seperti rumus sonar
    2bba:	9d 09       	sbc	r25, r13
    2bbc:	6c 01       	movw	r12, r24
    2bbe:	1a f4       	brpl	.+6      	; 0x2bc6 <main+0x12c>
    2bc0:	ff ef       	ldi	r31, 0xFF	; 255
    2bc2:	cf 1a       	sub	r12, r31
    2bc4:	df 0a       	sbc	r13, r31
    2bc6:	d5 94       	asr	r13
    2bc8:	c7 94       	ror	r12
    2bca:	c7 01       	movw	r24, r14
}
*/

static uint16_t piezo_read(){
	uint16_t result;
	adc_enable(&MY_ADC);
    2bcc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <adc_enable>
    2bd0:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	f8 94       	cli
	cpu_irq_disable();
    2bd6:	99 81       	ldd	r25, Y+1	; 0x01
	return flags;
    2bd8:	f7 01       	movw	r30, r14
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 61       	ori	r24, 0x10	; 16
    2bde:	80 83       	st	Z, r24
    2be0:	9f bf       	out	0x3f, r25	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2be2:	f7 01       	movw	r30, r14
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    2be4:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    2be6:	82 ff       	sbrs	r24, 2
    2be8:	fc cf       	rjmp	.-8      	; 0x2be2 <main+0x148>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    2bea:	46 82       	std	Z+6, r4	; 0x06
	adc_start_conversion(&MY_ADC, PIEZO_ADC_CH);
	adc_wait_for_interrupt_flag(&MY_ADC, PIEZO_ADC_CH);
	delay_ms(1);
    2bec:	6e e4       	ldi	r22, 0x4E	; 78
    2bee:	71 e0       	ldi	r23, 0x01	; 1
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	bf de       	rcall	.-642    	; 0x2974 <__portable_avr_delay_cycles>
    2bf6:	f3 01       	movw	r30, r6
	result = adc_get_result(&MY_ADC, PIEZO_ADC_CH);
    2bf8:	a4 80       	ldd	r10, Z+4	; 0x04
    2bfa:	b5 80       	ldd	r11, Z+5	; 0x05
		
		int inc = newinc - oldinc;
		int newscore = inc/2; //Dibagi 2 seperti rumus sonar
		
		result = piezo_read();
		int ultra_read = 17 - newscore;
    2bfc:	c4 01       	movw	r24, r8
    2bfe:	8c 19       	sub	r24, r12
    2c00:	9d 09       	sbc	r25, r13
		print_lcd(result, ultra_read); 
    2c02:	6c 01       	movw	r12, r24
    2c04:	bc 01       	movw	r22, r24
    2c06:	c5 01       	movw	r24, r10
		checkLight(result, ultra_read);
    2c08:	e6 de       	rcall	.-564    	; 0x29d6 <print_lcd>
    2c0a:	b6 01       	movw	r22, r12
    2c0c:	c5 01       	movw	r24, r10
    2c0e:	1a df       	rcall	.-460    	; 0x2a44 <checkLight>
		
		delay_ms(100);
    2c10:	66 e3       	ldi	r22, 0x36	; 54
    2c12:	72 e8       	ldi	r23, 0x82	; 130
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	ad de       	rcall	.-678    	; 0x2974 <__portable_avr_delay_cycles>
    2c1a:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <incremental>
		incremental = 0; //reset nilai variable incremental
    2c1e:	10 92 43 23 	sts	0x2343, r1	; 0x802343 <incremental+0x1>
    2c22:	a6 cf       	rjmp	.-180    	; 0x2b70 <main+0xd6>

00002c24 <__udivmodsi4>:
	}
    2c24:	a1 e2       	ldi	r26, 0x21	; 33
    2c26:	1a 2e       	mov	r1, r26
    2c28:	aa 1b       	sub	r26, r26
    2c2a:	bb 1b       	sub	r27, r27
    2c2c:	fd 01       	movw	r30, r26
    2c2e:	0d c0       	rjmp	.+26     	; 0x2c4a <__udivmodsi4_ep>

00002c30 <__udivmodsi4_loop>:
    2c30:	aa 1f       	adc	r26, r26
    2c32:	bb 1f       	adc	r27, r27
    2c34:	ee 1f       	adc	r30, r30
    2c36:	ff 1f       	adc	r31, r31
    2c38:	a2 17       	cp	r26, r18
    2c3a:	b3 07       	cpc	r27, r19
    2c3c:	e4 07       	cpc	r30, r20
    2c3e:	f5 07       	cpc	r31, r21
    2c40:	20 f0       	brcs	.+8      	; 0x2c4a <__udivmodsi4_ep>
    2c42:	a2 1b       	sub	r26, r18
    2c44:	b3 0b       	sbc	r27, r19
    2c46:	e4 0b       	sbc	r30, r20
    2c48:	f5 0b       	sbc	r31, r21

00002c4a <__udivmodsi4_ep>:
    2c4a:	66 1f       	adc	r22, r22
    2c4c:	77 1f       	adc	r23, r23
    2c4e:	88 1f       	adc	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	1a 94       	dec	r1
    2c54:	69 f7       	brne	.-38     	; 0x2c30 <__udivmodsi4_loop>
    2c56:	60 95       	com	r22
    2c58:	70 95       	com	r23
    2c5a:	80 95       	com	r24
    2c5c:	90 95       	com	r25
    2c5e:	9b 01       	movw	r18, r22
    2c60:	ac 01       	movw	r20, r24
    2c62:	bd 01       	movw	r22, r26
    2c64:	cf 01       	movw	r24, r30
    2c66:	08 95       	ret

00002c68 <snprintf>:
    2c68:	0f 93       	push	r16
    2c6a:	1f 93       	push	r17
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	2e 97       	sbiw	r28, 0x0e	; 14
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0e 89       	ldd	r16, Y+22	; 0x16
    2c7c:	1f 89       	ldd	r17, Y+23	; 0x17
    2c7e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c80:	99 8d       	ldd	r25, Y+25	; 0x19
    2c82:	26 e0       	ldi	r18, 0x06	; 6
    2c84:	2c 83       	std	Y+4, r18	; 0x04
    2c86:	09 83       	std	Y+1, r16	; 0x01
    2c88:	1a 83       	std	Y+2, r17	; 0x02
    2c8a:	97 ff       	sbrs	r25, 7
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <snprintf+0x2a>
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e8       	ldi	r25, 0x80	; 128
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	ae 01       	movw	r20, r28
    2c9a:	44 5e       	subi	r20, 0xE4	; 228
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ca0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	16 d0       	rcall	.+44     	; 0x2cd4 <vfprintf>
    2ca8:	4d 81       	ldd	r20, Y+5	; 0x05
    2caa:	5e 81       	ldd	r21, Y+6	; 0x06
    2cac:	57 fd       	sbrc	r21, 7
    2cae:	0a c0       	rjmp	.+20     	; 0x2cc4 <snprintf+0x5c>
    2cb0:	2f 81       	ldd	r18, Y+7	; 0x07
    2cb2:	38 85       	ldd	r19, Y+8	; 0x08
    2cb4:	42 17       	cp	r20, r18
    2cb6:	53 07       	cpc	r21, r19
    2cb8:	0c f4       	brge	.+2      	; 0x2cbc <snprintf+0x54>
    2cba:	9a 01       	movw	r18, r20
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	10 82       	st	Z, r1
    2cc4:	2e 96       	adiw	r28, 0x0e	; 14
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <vfprintf>:
    2cd4:	2f 92       	push	r2
    2cd6:	3f 92       	push	r3
    2cd8:	4f 92       	push	r4
    2cda:	5f 92       	push	r5
    2cdc:	6f 92       	push	r6
    2cde:	7f 92       	push	r7
    2ce0:	8f 92       	push	r8
    2ce2:	9f 92       	push	r9
    2ce4:	af 92       	push	r10
    2ce6:	bf 92       	push	r11
    2ce8:	cf 92       	push	r12
    2cea:	df 92       	push	r13
    2cec:	ef 92       	push	r14
    2cee:	ff 92       	push	r15
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	2b 97       	sbiw	r28, 0x0b	; 11
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	6c 01       	movw	r12, r24
    2d04:	7b 01       	movw	r14, r22
    2d06:	8a 01       	movw	r16, r20
    2d08:	fc 01       	movw	r30, r24
    2d0a:	16 82       	std	Z+6, r1	; 0x06
    2d0c:	17 82       	std	Z+7, r1	; 0x07
    2d0e:	83 81       	ldd	r24, Z+3	; 0x03
    2d10:	81 ff       	sbrs	r24, 1
    2d12:	bf c1       	rjmp	.+894    	; 0x3092 <vfprintf+0x3be>
    2d14:	ce 01       	movw	r24, r28
    2d16:	01 96       	adiw	r24, 0x01	; 1
    2d18:	3c 01       	movw	r6, r24
    2d1a:	f6 01       	movw	r30, r12
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	f7 01       	movw	r30, r14
    2d20:	93 fd       	sbrc	r25, 3
    2d22:	85 91       	lpm	r24, Z+
    2d24:	93 ff       	sbrs	r25, 3
    2d26:	81 91       	ld	r24, Z+
    2d28:	7f 01       	movw	r14, r30
    2d2a:	88 23       	and	r24, r24
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <vfprintf+0x5c>
    2d2e:	ad c1       	rjmp	.+858    	; 0x308a <vfprintf+0x3b6>
    2d30:	85 32       	cpi	r24, 0x25	; 37
    2d32:	39 f4       	brne	.+14     	; 0x2d42 <vfprintf+0x6e>
    2d34:	93 fd       	sbrc	r25, 3
    2d36:	85 91       	lpm	r24, Z+
    2d38:	93 ff       	sbrs	r25, 3
    2d3a:	81 91       	ld	r24, Z+
    2d3c:	7f 01       	movw	r14, r30
    2d3e:	85 32       	cpi	r24, 0x25	; 37
    2d40:	21 f4       	brne	.+8      	; 0x2d4a <vfprintf+0x76>
    2d42:	b6 01       	movw	r22, r12
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	d3 d1       	rcall	.+934    	; 0x30ee <fputc>
    2d48:	e8 cf       	rjmp	.-48     	; 0x2d1a <vfprintf+0x46>
    2d4a:	91 2c       	mov	r9, r1
    2d4c:	21 2c       	mov	r2, r1
    2d4e:	31 2c       	mov	r3, r1
    2d50:	ff e1       	ldi	r31, 0x1F	; 31
    2d52:	f3 15       	cp	r31, r3
    2d54:	d8 f0       	brcs	.+54     	; 0x2d8c <vfprintf+0xb8>
    2d56:	8b 32       	cpi	r24, 0x2B	; 43
    2d58:	79 f0       	breq	.+30     	; 0x2d78 <vfprintf+0xa4>
    2d5a:	38 f4       	brcc	.+14     	; 0x2d6a <vfprintf+0x96>
    2d5c:	80 32       	cpi	r24, 0x20	; 32
    2d5e:	79 f0       	breq	.+30     	; 0x2d7e <vfprintf+0xaa>
    2d60:	83 32       	cpi	r24, 0x23	; 35
    2d62:	a1 f4       	brne	.+40     	; 0x2d8c <vfprintf+0xb8>
    2d64:	23 2d       	mov	r18, r3
    2d66:	20 61       	ori	r18, 0x10	; 16
    2d68:	1d c0       	rjmp	.+58     	; 0x2da4 <vfprintf+0xd0>
    2d6a:	8d 32       	cpi	r24, 0x2D	; 45
    2d6c:	61 f0       	breq	.+24     	; 0x2d86 <vfprintf+0xb2>
    2d6e:	80 33       	cpi	r24, 0x30	; 48
    2d70:	69 f4       	brne	.+26     	; 0x2d8c <vfprintf+0xb8>
    2d72:	23 2d       	mov	r18, r3
    2d74:	21 60       	ori	r18, 0x01	; 1
    2d76:	16 c0       	rjmp	.+44     	; 0x2da4 <vfprintf+0xd0>
    2d78:	83 2d       	mov	r24, r3
    2d7a:	82 60       	ori	r24, 0x02	; 2
    2d7c:	38 2e       	mov	r3, r24
    2d7e:	e3 2d       	mov	r30, r3
    2d80:	e4 60       	ori	r30, 0x04	; 4
    2d82:	3e 2e       	mov	r3, r30
    2d84:	2a c0       	rjmp	.+84     	; 0x2dda <vfprintf+0x106>
    2d86:	f3 2d       	mov	r31, r3
    2d88:	f8 60       	ori	r31, 0x08	; 8
    2d8a:	1d c0       	rjmp	.+58     	; 0x2dc6 <vfprintf+0xf2>
    2d8c:	37 fc       	sbrc	r3, 7
    2d8e:	2d c0       	rjmp	.+90     	; 0x2dea <vfprintf+0x116>
    2d90:	20 ed       	ldi	r18, 0xD0	; 208
    2d92:	28 0f       	add	r18, r24
    2d94:	2a 30       	cpi	r18, 0x0A	; 10
    2d96:	40 f0       	brcs	.+16     	; 0x2da8 <vfprintf+0xd4>
    2d98:	8e 32       	cpi	r24, 0x2E	; 46
    2d9a:	b9 f4       	brne	.+46     	; 0x2dca <vfprintf+0xf6>
    2d9c:	36 fc       	sbrc	r3, 6
    2d9e:	75 c1       	rjmp	.+746    	; 0x308a <vfprintf+0x3b6>
    2da0:	23 2d       	mov	r18, r3
    2da2:	20 64       	ori	r18, 0x40	; 64
    2da4:	32 2e       	mov	r3, r18
    2da6:	19 c0       	rjmp	.+50     	; 0x2dda <vfprintf+0x106>
    2da8:	36 fe       	sbrs	r3, 6
    2daa:	06 c0       	rjmp	.+12     	; 0x2db8 <vfprintf+0xe4>
    2dac:	8a e0       	ldi	r24, 0x0A	; 10
    2dae:	98 9e       	mul	r9, r24
    2db0:	20 0d       	add	r18, r0
    2db2:	11 24       	eor	r1, r1
    2db4:	92 2e       	mov	r9, r18
    2db6:	11 c0       	rjmp	.+34     	; 0x2dda <vfprintf+0x106>
    2db8:	ea e0       	ldi	r30, 0x0A	; 10
    2dba:	2e 9e       	mul	r2, r30
    2dbc:	20 0d       	add	r18, r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	22 2e       	mov	r2, r18
    2dc2:	f3 2d       	mov	r31, r3
    2dc4:	f0 62       	ori	r31, 0x20	; 32
    2dc6:	3f 2e       	mov	r3, r31
    2dc8:	08 c0       	rjmp	.+16     	; 0x2dda <vfprintf+0x106>
    2dca:	8c 36       	cpi	r24, 0x6C	; 108
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <vfprintf+0x102>
    2dce:	83 2d       	mov	r24, r3
    2dd0:	80 68       	ori	r24, 0x80	; 128
    2dd2:	38 2e       	mov	r3, r24
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <vfprintf+0x106>
    2dd6:	88 36       	cpi	r24, 0x68	; 104
    2dd8:	41 f4       	brne	.+16     	; 0x2dea <vfprintf+0x116>
    2dda:	f7 01       	movw	r30, r14
    2ddc:	93 fd       	sbrc	r25, 3
    2dde:	85 91       	lpm	r24, Z+
    2de0:	93 ff       	sbrs	r25, 3
    2de2:	81 91       	ld	r24, Z+
    2de4:	7f 01       	movw	r14, r30
    2de6:	81 11       	cpse	r24, r1
    2de8:	b3 cf       	rjmp	.-154    	; 0x2d50 <vfprintf+0x7c>
    2dea:	98 2f       	mov	r25, r24
    2dec:	9f 7d       	andi	r25, 0xDF	; 223
    2dee:	95 54       	subi	r25, 0x45	; 69
    2df0:	93 30       	cpi	r25, 0x03	; 3
    2df2:	28 f4       	brcc	.+10     	; 0x2dfe <vfprintf+0x12a>
    2df4:	0c 5f       	subi	r16, 0xFC	; 252
    2df6:	1f 4f       	sbci	r17, 0xFF	; 255
    2df8:	9f e3       	ldi	r25, 0x3F	; 63
    2dfa:	99 83       	std	Y+1, r25	; 0x01
    2dfc:	0d c0       	rjmp	.+26     	; 0x2e18 <vfprintf+0x144>
    2dfe:	83 36       	cpi	r24, 0x63	; 99
    2e00:	31 f0       	breq	.+12     	; 0x2e0e <vfprintf+0x13a>
    2e02:	83 37       	cpi	r24, 0x73	; 115
    2e04:	71 f0       	breq	.+28     	; 0x2e22 <vfprintf+0x14e>
    2e06:	83 35       	cpi	r24, 0x53	; 83
    2e08:	09 f0       	breq	.+2      	; 0x2e0c <vfprintf+0x138>
    2e0a:	55 c0       	rjmp	.+170    	; 0x2eb6 <vfprintf+0x1e2>
    2e0c:	20 c0       	rjmp	.+64     	; 0x2e4e <vfprintf+0x17a>
    2e0e:	f8 01       	movw	r30, r16
    2e10:	80 81       	ld	r24, Z
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	0e 5f       	subi	r16, 0xFE	; 254
    2e16:	1f 4f       	sbci	r17, 0xFF	; 255
    2e18:	88 24       	eor	r8, r8
    2e1a:	83 94       	inc	r8
    2e1c:	91 2c       	mov	r9, r1
    2e1e:	53 01       	movw	r10, r6
    2e20:	12 c0       	rjmp	.+36     	; 0x2e46 <vfprintf+0x172>
    2e22:	28 01       	movw	r4, r16
    2e24:	f2 e0       	ldi	r31, 0x02	; 2
    2e26:	4f 0e       	add	r4, r31
    2e28:	51 1c       	adc	r5, r1
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	a0 80       	ld	r10, Z
    2e2e:	b1 80       	ldd	r11, Z+1	; 0x01
    2e30:	36 fe       	sbrs	r3, 6
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <vfprintf+0x166>
    2e34:	69 2d       	mov	r22, r9
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	02 c0       	rjmp	.+4      	; 0x2e3e <vfprintf+0x16a>
    2e3a:	6f ef       	ldi	r22, 0xFF	; 255
    2e3c:	7f ef       	ldi	r23, 0xFF	; 255
    2e3e:	c5 01       	movw	r24, r10
    2e40:	4b d1       	rcall	.+662    	; 0x30d8 <strnlen>
    2e42:	4c 01       	movw	r8, r24
    2e44:	82 01       	movw	r16, r4
    2e46:	f3 2d       	mov	r31, r3
    2e48:	ff 77       	andi	r31, 0x7F	; 127
    2e4a:	3f 2e       	mov	r3, r31
    2e4c:	15 c0       	rjmp	.+42     	; 0x2e78 <vfprintf+0x1a4>
    2e4e:	28 01       	movw	r4, r16
    2e50:	22 e0       	ldi	r18, 0x02	; 2
    2e52:	42 0e       	add	r4, r18
    2e54:	51 1c       	adc	r5, r1
    2e56:	f8 01       	movw	r30, r16
    2e58:	a0 80       	ld	r10, Z
    2e5a:	b1 80       	ldd	r11, Z+1	; 0x01
    2e5c:	36 fe       	sbrs	r3, 6
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <vfprintf+0x192>
    2e60:	69 2d       	mov	r22, r9
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <vfprintf+0x196>
    2e66:	6f ef       	ldi	r22, 0xFF	; 255
    2e68:	7f ef       	ldi	r23, 0xFF	; 255
    2e6a:	c5 01       	movw	r24, r10
    2e6c:	2a d1       	rcall	.+596    	; 0x30c2 <strnlen_P>
    2e6e:	4c 01       	movw	r8, r24
    2e70:	f3 2d       	mov	r31, r3
    2e72:	f0 68       	ori	r31, 0x80	; 128
    2e74:	3f 2e       	mov	r3, r31
    2e76:	82 01       	movw	r16, r4
    2e78:	33 fc       	sbrc	r3, 3
    2e7a:	19 c0       	rjmp	.+50     	; 0x2eae <vfprintf+0x1da>
    2e7c:	82 2d       	mov	r24, r2
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	88 16       	cp	r8, r24
    2e82:	99 06       	cpc	r9, r25
    2e84:	a0 f4       	brcc	.+40     	; 0x2eae <vfprintf+0x1da>
    2e86:	b6 01       	movw	r22, r12
    2e88:	80 e2       	ldi	r24, 0x20	; 32
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	30 d1       	rcall	.+608    	; 0x30ee <fputc>
    2e8e:	2a 94       	dec	r2
    2e90:	f5 cf       	rjmp	.-22     	; 0x2e7c <vfprintf+0x1a8>
    2e92:	f5 01       	movw	r30, r10
    2e94:	37 fc       	sbrc	r3, 7
    2e96:	85 91       	lpm	r24, Z+
    2e98:	37 fe       	sbrs	r3, 7
    2e9a:	81 91       	ld	r24, Z+
    2e9c:	5f 01       	movw	r10, r30
    2e9e:	b6 01       	movw	r22, r12
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	25 d1       	rcall	.+586    	; 0x30ee <fputc>
    2ea4:	21 10       	cpse	r2, r1
    2ea6:	2a 94       	dec	r2
    2ea8:	21 e0       	ldi	r18, 0x01	; 1
    2eaa:	82 1a       	sub	r8, r18
    2eac:	91 08       	sbc	r9, r1
    2eae:	81 14       	cp	r8, r1
    2eb0:	91 04       	cpc	r9, r1
    2eb2:	79 f7       	brne	.-34     	; 0x2e92 <vfprintf+0x1be>
    2eb4:	e1 c0       	rjmp	.+450    	; 0x3078 <vfprintf+0x3a4>
    2eb6:	84 36       	cpi	r24, 0x64	; 100
    2eb8:	11 f0       	breq	.+4      	; 0x2ebe <vfprintf+0x1ea>
    2eba:	89 36       	cpi	r24, 0x69	; 105
    2ebc:	39 f5       	brne	.+78     	; 0x2f0c <vfprintf+0x238>
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	37 fe       	sbrs	r3, 7
    2ec2:	07 c0       	rjmp	.+14     	; 0x2ed2 <vfprintf+0x1fe>
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	0c 5f       	subi	r16, 0xFC	; 252
    2ece:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed0:	08 c0       	rjmp	.+16     	; 0x2ee2 <vfprintf+0x20e>
    2ed2:	60 81       	ld	r22, Z
    2ed4:	71 81       	ldd	r23, Z+1	; 0x01
    2ed6:	07 2e       	mov	r0, r23
    2ed8:	00 0c       	add	r0, r0
    2eda:	88 0b       	sbc	r24, r24
    2edc:	99 0b       	sbc	r25, r25
    2ede:	0e 5f       	subi	r16, 0xFE	; 254
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee2:	f3 2d       	mov	r31, r3
    2ee4:	ff 76       	andi	r31, 0x6F	; 111
    2ee6:	3f 2e       	mov	r3, r31
    2ee8:	97 ff       	sbrs	r25, 7
    2eea:	09 c0       	rjmp	.+18     	; 0x2efe <vfprintf+0x22a>
    2eec:	90 95       	com	r25
    2eee:	80 95       	com	r24
    2ef0:	70 95       	com	r23
    2ef2:	61 95       	neg	r22
    2ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    2efa:	f0 68       	ori	r31, 0x80	; 128
    2efc:	3f 2e       	mov	r3, r31
    2efe:	2a e0       	ldi	r18, 0x0A	; 10
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	a3 01       	movw	r20, r6
    2f04:	30 d1       	rcall	.+608    	; 0x3166 <__ultoa_invert>
    2f06:	88 2e       	mov	r8, r24
    2f08:	86 18       	sub	r8, r6
    2f0a:	44 c0       	rjmp	.+136    	; 0x2f94 <vfprintf+0x2c0>
    2f0c:	85 37       	cpi	r24, 0x75	; 117
    2f0e:	31 f4       	brne	.+12     	; 0x2f1c <vfprintf+0x248>
    2f10:	23 2d       	mov	r18, r3
    2f12:	2f 7e       	andi	r18, 0xEF	; 239
    2f14:	b2 2e       	mov	r11, r18
    2f16:	2a e0       	ldi	r18, 0x0A	; 10
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	25 c0       	rjmp	.+74     	; 0x2f66 <vfprintf+0x292>
    2f1c:	93 2d       	mov	r25, r3
    2f1e:	99 7f       	andi	r25, 0xF9	; 249
    2f20:	b9 2e       	mov	r11, r25
    2f22:	8f 36       	cpi	r24, 0x6F	; 111
    2f24:	c1 f0       	breq	.+48     	; 0x2f56 <vfprintf+0x282>
    2f26:	18 f4       	brcc	.+6      	; 0x2f2e <vfprintf+0x25a>
    2f28:	88 35       	cpi	r24, 0x58	; 88
    2f2a:	79 f0       	breq	.+30     	; 0x2f4a <vfprintf+0x276>
    2f2c:	ae c0       	rjmp	.+348    	; 0x308a <vfprintf+0x3b6>
    2f2e:	80 37       	cpi	r24, 0x70	; 112
    2f30:	19 f0       	breq	.+6      	; 0x2f38 <vfprintf+0x264>
    2f32:	88 37       	cpi	r24, 0x78	; 120
    2f34:	21 f0       	breq	.+8      	; 0x2f3e <vfprintf+0x26a>
    2f36:	a9 c0       	rjmp	.+338    	; 0x308a <vfprintf+0x3b6>
    2f38:	e9 2f       	mov	r30, r25
    2f3a:	e0 61       	ori	r30, 0x10	; 16
    2f3c:	be 2e       	mov	r11, r30
    2f3e:	b4 fe       	sbrs	r11, 4
    2f40:	0d c0       	rjmp	.+26     	; 0x2f5c <vfprintf+0x288>
    2f42:	fb 2d       	mov	r31, r11
    2f44:	f4 60       	ori	r31, 0x04	; 4
    2f46:	bf 2e       	mov	r11, r31
    2f48:	09 c0       	rjmp	.+18     	; 0x2f5c <vfprintf+0x288>
    2f4a:	34 fe       	sbrs	r3, 4
    2f4c:	0a c0       	rjmp	.+20     	; 0x2f62 <vfprintf+0x28e>
    2f4e:	29 2f       	mov	r18, r25
    2f50:	26 60       	ori	r18, 0x06	; 6
    2f52:	b2 2e       	mov	r11, r18
    2f54:	06 c0       	rjmp	.+12     	; 0x2f62 <vfprintf+0x28e>
    2f56:	28 e0       	ldi	r18, 0x08	; 8
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <vfprintf+0x292>
    2f5c:	20 e1       	ldi	r18, 0x10	; 16
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <vfprintf+0x292>
    2f62:	20 e1       	ldi	r18, 0x10	; 16
    2f64:	32 e0       	ldi	r19, 0x02	; 2
    2f66:	f8 01       	movw	r30, r16
    2f68:	b7 fe       	sbrs	r11, 7
    2f6a:	07 c0       	rjmp	.+14     	; 0x2f7a <vfprintf+0x2a6>
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	0c 5f       	subi	r16, 0xFC	; 252
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	06 c0       	rjmp	.+12     	; 0x2f86 <vfprintf+0x2b2>
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 5f       	subi	r16, 0xFE	; 254
    2f84:	1f 4f       	sbci	r17, 0xFF	; 255
    2f86:	a3 01       	movw	r20, r6
    2f88:	ee d0       	rcall	.+476    	; 0x3166 <__ultoa_invert>
    2f8a:	88 2e       	mov	r8, r24
    2f8c:	86 18       	sub	r8, r6
    2f8e:	fb 2d       	mov	r31, r11
    2f90:	ff 77       	andi	r31, 0x7F	; 127
    2f92:	3f 2e       	mov	r3, r31
    2f94:	36 fe       	sbrs	r3, 6
    2f96:	0d c0       	rjmp	.+26     	; 0x2fb2 <vfprintf+0x2de>
    2f98:	23 2d       	mov	r18, r3
    2f9a:	2e 7f       	andi	r18, 0xFE	; 254
    2f9c:	a2 2e       	mov	r10, r18
    2f9e:	89 14       	cp	r8, r9
    2fa0:	58 f4       	brcc	.+22     	; 0x2fb8 <vfprintf+0x2e4>
    2fa2:	34 fe       	sbrs	r3, 4
    2fa4:	0b c0       	rjmp	.+22     	; 0x2fbc <vfprintf+0x2e8>
    2fa6:	32 fc       	sbrc	r3, 2
    2fa8:	09 c0       	rjmp	.+18     	; 0x2fbc <vfprintf+0x2e8>
    2faa:	83 2d       	mov	r24, r3
    2fac:	8e 7e       	andi	r24, 0xEE	; 238
    2fae:	a8 2e       	mov	r10, r24
    2fb0:	05 c0       	rjmp	.+10     	; 0x2fbc <vfprintf+0x2e8>
    2fb2:	b8 2c       	mov	r11, r8
    2fb4:	a3 2c       	mov	r10, r3
    2fb6:	03 c0       	rjmp	.+6      	; 0x2fbe <vfprintf+0x2ea>
    2fb8:	b8 2c       	mov	r11, r8
    2fba:	01 c0       	rjmp	.+2      	; 0x2fbe <vfprintf+0x2ea>
    2fbc:	b9 2c       	mov	r11, r9
    2fbe:	a4 fe       	sbrs	r10, 4
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <vfprintf+0x30c>
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e8 0d       	add	r30, r8
    2fc6:	f1 1d       	adc	r31, r1
    2fc8:	80 81       	ld	r24, Z
    2fca:	80 33       	cpi	r24, 0x30	; 48
    2fcc:	21 f4       	brne	.+8      	; 0x2fd6 <vfprintf+0x302>
    2fce:	9a 2d       	mov	r25, r10
    2fd0:	99 7e       	andi	r25, 0xE9	; 233
    2fd2:	a9 2e       	mov	r10, r25
    2fd4:	09 c0       	rjmp	.+18     	; 0x2fe8 <vfprintf+0x314>
    2fd6:	a2 fe       	sbrs	r10, 2
    2fd8:	06 c0       	rjmp	.+12     	; 0x2fe6 <vfprintf+0x312>
    2fda:	b3 94       	inc	r11
    2fdc:	b3 94       	inc	r11
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <vfprintf+0x314>
    2fe0:	8a 2d       	mov	r24, r10
    2fe2:	86 78       	andi	r24, 0x86	; 134
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <vfprintf+0x314>
    2fe6:	b3 94       	inc	r11
    2fe8:	a3 fc       	sbrc	r10, 3
    2fea:	10 c0       	rjmp	.+32     	; 0x300c <vfprintf+0x338>
    2fec:	a0 fe       	sbrs	r10, 0
    2fee:	06 c0       	rjmp	.+12     	; 0x2ffc <vfprintf+0x328>
    2ff0:	b2 14       	cp	r11, r2
    2ff2:	80 f4       	brcc	.+32     	; 0x3014 <vfprintf+0x340>
    2ff4:	28 0c       	add	r2, r8
    2ff6:	92 2c       	mov	r9, r2
    2ff8:	9b 18       	sub	r9, r11
    2ffa:	0d c0       	rjmp	.+26     	; 0x3016 <vfprintf+0x342>
    2ffc:	b2 14       	cp	r11, r2
    2ffe:	58 f4       	brcc	.+22     	; 0x3016 <vfprintf+0x342>
    3000:	b6 01       	movw	r22, r12
    3002:	80 e2       	ldi	r24, 0x20	; 32
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	73 d0       	rcall	.+230    	; 0x30ee <fputc>
    3008:	b3 94       	inc	r11
    300a:	f8 cf       	rjmp	.-16     	; 0x2ffc <vfprintf+0x328>
    300c:	b2 14       	cp	r11, r2
    300e:	18 f4       	brcc	.+6      	; 0x3016 <vfprintf+0x342>
    3010:	2b 18       	sub	r2, r11
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <vfprintf+0x344>
    3014:	98 2c       	mov	r9, r8
    3016:	21 2c       	mov	r2, r1
    3018:	a4 fe       	sbrs	r10, 4
    301a:	0f c0       	rjmp	.+30     	; 0x303a <vfprintf+0x366>
    301c:	b6 01       	movw	r22, r12
    301e:	80 e3       	ldi	r24, 0x30	; 48
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	65 d0       	rcall	.+202    	; 0x30ee <fputc>
    3024:	a2 fe       	sbrs	r10, 2
    3026:	16 c0       	rjmp	.+44     	; 0x3054 <vfprintf+0x380>
    3028:	a1 fc       	sbrc	r10, 1
    302a:	03 c0       	rjmp	.+6      	; 0x3032 <vfprintf+0x35e>
    302c:	88 e7       	ldi	r24, 0x78	; 120
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <vfprintf+0x362>
    3032:	88 e5       	ldi	r24, 0x58	; 88
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	b6 01       	movw	r22, r12
    3038:	0c c0       	rjmp	.+24     	; 0x3052 <vfprintf+0x37e>
    303a:	8a 2d       	mov	r24, r10
    303c:	86 78       	andi	r24, 0x86	; 134
    303e:	51 f0       	breq	.+20     	; 0x3054 <vfprintf+0x380>
    3040:	a1 fe       	sbrs	r10, 1
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <vfprintf+0x374>
    3044:	8b e2       	ldi	r24, 0x2B	; 43
    3046:	01 c0       	rjmp	.+2      	; 0x304a <vfprintf+0x376>
    3048:	80 e2       	ldi	r24, 0x20	; 32
    304a:	a7 fc       	sbrc	r10, 7
    304c:	8d e2       	ldi	r24, 0x2D	; 45
    304e:	b6 01       	movw	r22, r12
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	4d d0       	rcall	.+154    	; 0x30ee <fputc>
    3054:	89 14       	cp	r8, r9
    3056:	30 f4       	brcc	.+12     	; 0x3064 <vfprintf+0x390>
    3058:	b6 01       	movw	r22, r12
    305a:	80 e3       	ldi	r24, 0x30	; 48
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	47 d0       	rcall	.+142    	; 0x30ee <fputc>
    3060:	9a 94       	dec	r9
    3062:	f8 cf       	rjmp	.-16     	; 0x3054 <vfprintf+0x380>
    3064:	8a 94       	dec	r8
    3066:	f3 01       	movw	r30, r6
    3068:	e8 0d       	add	r30, r8
    306a:	f1 1d       	adc	r31, r1
    306c:	80 81       	ld	r24, Z
    306e:	b6 01       	movw	r22, r12
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	3d d0       	rcall	.+122    	; 0x30ee <fputc>
    3074:	81 10       	cpse	r8, r1
    3076:	f6 cf       	rjmp	.-20     	; 0x3064 <vfprintf+0x390>
    3078:	22 20       	and	r2, r2
    307a:	09 f4       	brne	.+2      	; 0x307e <vfprintf+0x3aa>
    307c:	4e ce       	rjmp	.-868    	; 0x2d1a <vfprintf+0x46>
    307e:	b6 01       	movw	r22, r12
    3080:	80 e2       	ldi	r24, 0x20	; 32
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	34 d0       	rcall	.+104    	; 0x30ee <fputc>
    3086:	2a 94       	dec	r2
    3088:	f7 cf       	rjmp	.-18     	; 0x3078 <vfprintf+0x3a4>
    308a:	f6 01       	movw	r30, r12
    308c:	86 81       	ldd	r24, Z+6	; 0x06
    308e:	97 81       	ldd	r25, Z+7	; 0x07
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <vfprintf+0x3c2>
    3092:	8f ef       	ldi	r24, 0xFF	; 255
    3094:	9f ef       	ldi	r25, 0xFF	; 255
    3096:	2b 96       	adiw	r28, 0x0b	; 11
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	bf 90       	pop	r11
    30ae:	af 90       	pop	r10
    30b0:	9f 90       	pop	r9
    30b2:	8f 90       	pop	r8
    30b4:	7f 90       	pop	r7
    30b6:	6f 90       	pop	r6
    30b8:	5f 90       	pop	r5
    30ba:	4f 90       	pop	r4
    30bc:	3f 90       	pop	r3
    30be:	2f 90       	pop	r2
    30c0:	08 95       	ret

000030c2 <strnlen_P>:
    30c2:	fc 01       	movw	r30, r24
    30c4:	05 90       	lpm	r0, Z+
    30c6:	61 50       	subi	r22, 0x01	; 1
    30c8:	70 40       	sbci	r23, 0x00	; 0
    30ca:	01 10       	cpse	r0, r1
    30cc:	d8 f7       	brcc	.-10     	; 0x30c4 <strnlen_P+0x2>
    30ce:	80 95       	com	r24
    30d0:	90 95       	com	r25
    30d2:	8e 0f       	add	r24, r30
    30d4:	9f 1f       	adc	r25, r31
    30d6:	08 95       	ret

000030d8 <strnlen>:
    30d8:	fc 01       	movw	r30, r24
    30da:	61 50       	subi	r22, 0x01	; 1
    30dc:	70 40       	sbci	r23, 0x00	; 0
    30de:	01 90       	ld	r0, Z+
    30e0:	01 10       	cpse	r0, r1
    30e2:	d8 f7       	brcc	.-10     	; 0x30da <strnlen+0x2>
    30e4:	80 95       	com	r24
    30e6:	90 95       	com	r25
    30e8:	8e 0f       	add	r24, r30
    30ea:	9f 1f       	adc	r25, r31
    30ec:	08 95       	ret

000030ee <fputc>:
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    30f2:	cf 93       	push	r28
    30f4:	df 93       	push	r29
    30f6:	fb 01       	movw	r30, r22
    30f8:	23 81       	ldd	r18, Z+3	; 0x03
    30fa:	21 fd       	sbrc	r18, 1
    30fc:	03 c0       	rjmp	.+6      	; 0x3104 <fputc+0x16>
    30fe:	8f ef       	ldi	r24, 0xFF	; 255
    3100:	9f ef       	ldi	r25, 0xFF	; 255
    3102:	2c c0       	rjmp	.+88     	; 0x315c <fputc+0x6e>
    3104:	22 ff       	sbrs	r18, 2
    3106:	16 c0       	rjmp	.+44     	; 0x3134 <fputc+0x46>
    3108:	46 81       	ldd	r20, Z+6	; 0x06
    310a:	57 81       	ldd	r21, Z+7	; 0x07
    310c:	24 81       	ldd	r18, Z+4	; 0x04
    310e:	35 81       	ldd	r19, Z+5	; 0x05
    3110:	42 17       	cp	r20, r18
    3112:	53 07       	cpc	r21, r19
    3114:	44 f4       	brge	.+16     	; 0x3126 <fputc+0x38>
    3116:	a0 81       	ld	r26, Z
    3118:	b1 81       	ldd	r27, Z+1	; 0x01
    311a:	9d 01       	movw	r18, r26
    311c:	2f 5f       	subi	r18, 0xFF	; 255
    311e:	3f 4f       	sbci	r19, 0xFF	; 255
    3120:	20 83       	st	Z, r18
    3122:	31 83       	std	Z+1, r19	; 0x01
    3124:	8c 93       	st	X, r24
    3126:	26 81       	ldd	r18, Z+6	; 0x06
    3128:	37 81       	ldd	r19, Z+7	; 0x07
    312a:	2f 5f       	subi	r18, 0xFF	; 255
    312c:	3f 4f       	sbci	r19, 0xFF	; 255
    312e:	26 83       	std	Z+6, r18	; 0x06
    3130:	37 83       	std	Z+7, r19	; 0x07
    3132:	14 c0       	rjmp	.+40     	; 0x315c <fputc+0x6e>
    3134:	8b 01       	movw	r16, r22
    3136:	ec 01       	movw	r28, r24
    3138:	fb 01       	movw	r30, r22
    313a:	00 84       	ldd	r0, Z+8	; 0x08
    313c:	f1 85       	ldd	r31, Z+9	; 0x09
    313e:	e0 2d       	mov	r30, r0
    3140:	19 95       	eicall
    3142:	89 2b       	or	r24, r25
    3144:	e1 f6       	brne	.-72     	; 0x30fe <fputc+0x10>
    3146:	d8 01       	movw	r26, r16
    3148:	16 96       	adiw	r26, 0x06	; 6
    314a:	8d 91       	ld	r24, X+
    314c:	9c 91       	ld	r25, X
    314e:	17 97       	sbiw	r26, 0x07	; 7
    3150:	01 96       	adiw	r24, 0x01	; 1
    3152:	16 96       	adiw	r26, 0x06	; 6
    3154:	8d 93       	st	X+, r24
    3156:	9c 93       	st	X, r25
    3158:	17 97       	sbiw	r26, 0x07	; 7
    315a:	ce 01       	movw	r24, r28
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	08 95       	ret

00003166 <__ultoa_invert>:
    3166:	fa 01       	movw	r30, r20
    3168:	aa 27       	eor	r26, r26
    316a:	28 30       	cpi	r18, 0x08	; 8
    316c:	51 f1       	breq	.+84     	; 0x31c2 <__ultoa_invert+0x5c>
    316e:	20 31       	cpi	r18, 0x10	; 16
    3170:	81 f1       	breq	.+96     	; 0x31d2 <__ultoa_invert+0x6c>
    3172:	e8 94       	clt
    3174:	6f 93       	push	r22
    3176:	6e 7f       	andi	r22, 0xFE	; 254
    3178:	6e 5f       	subi	r22, 0xFE	; 254
    317a:	7f 4f       	sbci	r23, 0xFF	; 255
    317c:	8f 4f       	sbci	r24, 0xFF	; 255
    317e:	9f 4f       	sbci	r25, 0xFF	; 255
    3180:	af 4f       	sbci	r26, 0xFF	; 255
    3182:	b1 e0       	ldi	r27, 0x01	; 1
    3184:	3e d0       	rcall	.+124    	; 0x3202 <__ultoa_invert+0x9c>
    3186:	b4 e0       	ldi	r27, 0x04	; 4
    3188:	3c d0       	rcall	.+120    	; 0x3202 <__ultoa_invert+0x9c>
    318a:	67 0f       	add	r22, r23
    318c:	78 1f       	adc	r23, r24
    318e:	89 1f       	adc	r24, r25
    3190:	9a 1f       	adc	r25, r26
    3192:	a1 1d       	adc	r26, r1
    3194:	68 0f       	add	r22, r24
    3196:	79 1f       	adc	r23, r25
    3198:	8a 1f       	adc	r24, r26
    319a:	91 1d       	adc	r25, r1
    319c:	a1 1d       	adc	r26, r1
    319e:	6a 0f       	add	r22, r26
    31a0:	71 1d       	adc	r23, r1
    31a2:	81 1d       	adc	r24, r1
    31a4:	91 1d       	adc	r25, r1
    31a6:	a1 1d       	adc	r26, r1
    31a8:	20 d0       	rcall	.+64     	; 0x31ea <__ultoa_invert+0x84>
    31aa:	09 f4       	brne	.+2      	; 0x31ae <__ultoa_invert+0x48>
    31ac:	68 94       	set
    31ae:	3f 91       	pop	r19
    31b0:	2a e0       	ldi	r18, 0x0A	; 10
    31b2:	26 9f       	mul	r18, r22
    31b4:	11 24       	eor	r1, r1
    31b6:	30 19       	sub	r19, r0
    31b8:	30 5d       	subi	r19, 0xD0	; 208
    31ba:	31 93       	st	Z+, r19
    31bc:	de f6       	brtc	.-74     	; 0x3174 <__ultoa_invert+0xe>
    31be:	cf 01       	movw	r24, r30
    31c0:	08 95       	ret
    31c2:	46 2f       	mov	r20, r22
    31c4:	47 70       	andi	r20, 0x07	; 7
    31c6:	40 5d       	subi	r20, 0xD0	; 208
    31c8:	41 93       	st	Z+, r20
    31ca:	b3 e0       	ldi	r27, 0x03	; 3
    31cc:	0f d0       	rcall	.+30     	; 0x31ec <__ultoa_invert+0x86>
    31ce:	c9 f7       	brne	.-14     	; 0x31c2 <__ultoa_invert+0x5c>
    31d0:	f6 cf       	rjmp	.-20     	; 0x31be <__ultoa_invert+0x58>
    31d2:	46 2f       	mov	r20, r22
    31d4:	4f 70       	andi	r20, 0x0F	; 15
    31d6:	40 5d       	subi	r20, 0xD0	; 208
    31d8:	4a 33       	cpi	r20, 0x3A	; 58
    31da:	18 f0       	brcs	.+6      	; 0x31e2 <__ultoa_invert+0x7c>
    31dc:	49 5d       	subi	r20, 0xD9	; 217
    31de:	31 fd       	sbrc	r19, 1
    31e0:	40 52       	subi	r20, 0x20	; 32
    31e2:	41 93       	st	Z+, r20
    31e4:	02 d0       	rcall	.+4      	; 0x31ea <__ultoa_invert+0x84>
    31e6:	a9 f7       	brne	.-22     	; 0x31d2 <__ultoa_invert+0x6c>
    31e8:	ea cf       	rjmp	.-44     	; 0x31be <__ultoa_invert+0x58>
    31ea:	b4 e0       	ldi	r27, 0x04	; 4
    31ec:	a6 95       	lsr	r26
    31ee:	97 95       	ror	r25
    31f0:	87 95       	ror	r24
    31f2:	77 95       	ror	r23
    31f4:	67 95       	ror	r22
    31f6:	ba 95       	dec	r27
    31f8:	c9 f7       	brne	.-14     	; 0x31ec <__ultoa_invert+0x86>
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	61 05       	cpc	r22, r1
    31fe:	71 05       	cpc	r23, r1
    3200:	08 95       	ret
    3202:	9b 01       	movw	r18, r22
    3204:	ac 01       	movw	r20, r24
    3206:	0a 2e       	mov	r0, r26
    3208:	06 94       	lsr	r0
    320a:	57 95       	ror	r21
    320c:	47 95       	ror	r20
    320e:	37 95       	ror	r19
    3210:	27 95       	ror	r18
    3212:	ba 95       	dec	r27
    3214:	c9 f7       	brne	.-14     	; 0x3208 <__ultoa_invert+0xa2>
    3216:	62 0f       	add	r22, r18
    3218:	73 1f       	adc	r23, r19
    321a:	84 1f       	adc	r24, r20
    321c:	95 1f       	adc	r25, r21
    321e:	a0 1d       	adc	r26, r0
    3220:	08 95       	ret

00003222 <_exit>:
    3222:	f8 94       	cli

00003224 <__stop_program>:
    3224:	ff cf       	rjmp	.-2      	; 0x3224 <__stop_program>
